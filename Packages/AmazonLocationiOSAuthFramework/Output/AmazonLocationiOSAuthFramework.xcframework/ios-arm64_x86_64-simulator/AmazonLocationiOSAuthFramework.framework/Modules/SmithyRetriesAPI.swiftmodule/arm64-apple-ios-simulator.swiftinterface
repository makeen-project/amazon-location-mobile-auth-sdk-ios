// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyRetriesAPI
import Foundation
import Foundation/*.TimeInterval*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol RetryBackoffStrategy {
  func computeNextBackoffDelay(attempt: Swift.Int) -> Foundation.TimeInterval
}
public enum RetryError : Swift.Error {
  case maxAttemptsReached
  public static func == (a: SmithyRetriesAPI.RetryError, b: SmithyRetriesAPI.RetryError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RetryErrorInfo : Swift.Equatable {
  public var errorType: SmithyRetriesAPI.RetryErrorType
  public let retryAfterHint: Foundation.TimeInterval?
  public var isTimeout: Swift.Bool
  public init(errorType: SmithyRetriesAPI.RetryErrorType, retryAfterHint: Foundation.TimeInterval?, isTimeout: Swift.Bool)
  public static func == (a: SmithyRetriesAPI.RetryErrorInfo, b: SmithyRetriesAPI.RetryErrorInfo) -> Swift.Bool
}
public protocol RetryErrorInfoProvider {
  static func errorInfo(for error: any Swift.Error) -> SmithyRetriesAPI.RetryErrorInfo?
}
public enum RetryErrorType : Swift.Equatable {
  case transient
  case throttling
  case serverError
  case clientError
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SmithyRetriesAPI.RetryErrorType, b: SmithyRetriesAPI.RetryErrorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RetryStrategy {
  associatedtype Token : SmithyRetriesAPI.RetryToken
  init(options: SmithyRetriesAPI.RetryStrategyOptions)
  #if compiler(>=5.3) && $AsyncAwait
  func acquireInitialRetryToken(tokenScope: Swift.String) async throws -> Self.Token
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func refreshRetryTokenForRetry(tokenToRenew: Self.Token, errorInfo: SmithyRetriesAPI.RetryErrorInfo) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func recordSuccess(token: Self.Token) async
  #endif
}
public struct RetryStrategyOptions {
  public let backoffStrategy: any SmithyRetriesAPI.RetryBackoffStrategy
  public let maxRetriesBase: Swift.Int
  public enum RateLimitingMode {
    case standard
    case adaptive
    public static func == (a: SmithyRetriesAPI.RetryStrategyOptions.RateLimitingMode, b: SmithyRetriesAPI.RetryStrategyOptions.RateLimitingMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let rateLimitingMode: SmithyRetriesAPI.RetryStrategyOptions.RateLimitingMode
  public let availableCapacity: Swift.Int
  public let maxCapacity: Swift.Int
  public init(backoffStrategy: any SmithyRetriesAPI.RetryBackoffStrategy, maxRetriesBase: Swift.Int = 2, availableCapacity: Swift.Int = 500, maxCapacity: Swift.Int = 500, rateLimitingMode: SmithyRetriesAPI.RetryStrategyOptions.RateLimitingMode = .standard)
}
public protocol RetryToken : AnyObject {
  var retryCount: Swift.Int { get }
}
extension SmithyRetriesAPI.RetryError : Swift.Equatable {}
extension SmithyRetriesAPI.RetryError : Swift.Hashable {}
extension SmithyRetriesAPI.RetryErrorType : Swift.Hashable {}
extension SmithyRetriesAPI.RetryStrategyOptions.RateLimitingMode : Swift.Equatable {}
extension SmithyRetriesAPI.RetryStrategyOptions.RateLimitingMode : Swift.Hashable {}
