// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyChecksums
import AwsCommonRuntimeKit
import Foundation/*.Data*/
import Smithy/*.ReadableStream*/
import Smithy/*.Stream*/
import SmithyChecksumsAPI/*.Checksum*/
import SmithyChecksumsAPI/*.ChecksumAlgorithm*/
import SmithyChecksumsAPI/*.HashResult*/
import SmithyHTTPAPI/*.Headers*/
import SmithyHTTPAuth
import SmithyStreams/*.BufferedStream*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum HashError : Swift.Error {
  case invalidInput
  case hashingFailed(reason: Swift.String)
}
public enum UnknownChecksumError : Swift.Error {
  case notSupported(checksum: Swift.String)
}
extension SmithyChecksumsAPI.ChecksumAlgorithm {
  public static func from(string: Swift.String) -> (SmithyChecksumsAPI.ChecksumAlgorithm)?
  public static func fromList(_ stringArray: [Swift.String]) -> [SmithyChecksumsAPI.ChecksumAlgorithm]
  public var isFlexibleChecksum: Swift.Bool {
    get
  }
  public func createChecksum() -> any SmithyChecksumsAPI.Checksum
}
extension SmithyChecksumsAPI.ChecksumAlgorithm : Swift.Comparable {
  public static func < (lhs: SmithyChecksumsAPI.ChecksumAlgorithm, rhs: SmithyChecksumsAPI.ChecksumAlgorithm) -> Swift.Bool
}
extension Swift.Array where Element == SmithyChecksumsAPI.ChecksumAlgorithm {
  public func getPriorityOrderValidationList() -> [SmithyChecksumsAPI.ChecksumAlgorithm]
}
extension Swift.UInt32 {
  public func toBase64EncodedString() -> Swift.String
}
extension SmithyChecksumsAPI.HashResult {
  public func toHexString() -> Swift.String
  public func toBase64String() -> Swift.String
}
public enum ChecksumMismatchException : Swift.Error {
  case message(Swift.String)
}
@_hasMissingDesignatedInitializers public class ChunkedReader {
  #if compiler(>=5.3) && $AsyncAwait
  public func processNextChunk() async throws -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getFinalChunk() async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getSignedChunk(from stream: any Smithy.ReadableStream) async throws -> Foundation.Data?
  #endif
  @objc deinit
}
extension SmithyChecksums.ChunkedReader {
  public func updateTrailingHeader(name: Swift.String, value: Swift.String)
  public func getTrailingHeaders() -> SmithyHTTPAPI.Headers
  public func getChecksumAlgorithm() -> SmithyChecksumsAPI.ChecksumAlgorithm?
  public func setChecksumAlgorithm(checksumAlgorithm: SmithyChecksumsAPI.ChecksumAlgorithm?)
  public func getChecksum() -> (any SmithyChecksumsAPI.Checksum)?
  public func getCurrentChunk() -> Foundation.Data
  public func setCurrentChunk(chunk: Foundation.Data)
  public func getCurrentChunkBody() -> Foundation.Data
  public func setCurrentChunkBody(chunk: Foundation.Data)
}
public class ChunkedStream {
  public var chunkedReader: SmithyChecksums.ChunkedReader
  public init(inputStream: any Smithy.Stream, signingConfig: AwsCommonRuntimeKit.SigningConfig, previousSignature: Swift.String, trailingHeaders: SmithyHTTPAPI.Headers, checksumString: Swift.String? = nil) throws
  @objc deinit
}
extension SmithyChecksums.ChunkedStream : Smithy.Stream {
  public func write(contentsOf data: Foundation.Data) throws
  public func close()
  public func closeWithError(_ error: any Swift.Error)
  public var position: Foundation.Data.Index {
    get
  }
  public var length: Swift.Int? {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var isSeekable: Swift.Bool {
    get
  }
  public func read(upToCount count: Swift.Int) throws -> Foundation.Data?
  #if compiler(>=5.3) && $AsyncAwait
  public func readAsync(upToCount count: Swift.Int) async throws -> Foundation.Data?
  #endif
  public func readToEnd() throws -> Foundation.Data?
  #if compiler(>=5.3) && $AsyncAwait
  public func readToEndAsync() async throws -> Foundation.Data?
  #endif
  public func seek(toOffset offset: Swift.Int) throws
}
public let CHUNK_SIZE_BYTES: Swift.Int
public let CHUNKED_THRESHOLD: Swift.Int
extension Smithy.Stream {
  public var isEligibleForChunkedStreaming: Swift.Bool {
    get
  }
}
public class ValidatingBufferedStream {
  public init(stream: SmithyStreams.BufferedStream, expectedChecksum: Swift.String, checksumAlgorithm: SmithyChecksumsAPI.ChecksumAlgorithm)
  @objc deinit
}
extension SmithyChecksums.ValidatingBufferedStream : Smithy.Stream {
  public var position: Foundation.Data.Index {
    get
  }
  public var length: Swift.Int? {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var isSeekable: Swift.Bool {
    get
  }
  public func read(upToCount count: Swift.Int) throws -> Foundation.Data?
  #if compiler(>=5.3) && $AsyncAwait
  public func readAsync(upToCount count: Swift.Int) async throws -> Foundation.Data?
  #endif
  public func readToEnd() throws -> Foundation.Data?
  #if compiler(>=5.3) && $AsyncAwait
  public func readToEndAsync() async throws -> Foundation.Data?
  #endif
  public func write(contentsOf data: Foundation.Data) throws
  public func close()
  public func closeWithError(_ error: any Swift.Error)
}
