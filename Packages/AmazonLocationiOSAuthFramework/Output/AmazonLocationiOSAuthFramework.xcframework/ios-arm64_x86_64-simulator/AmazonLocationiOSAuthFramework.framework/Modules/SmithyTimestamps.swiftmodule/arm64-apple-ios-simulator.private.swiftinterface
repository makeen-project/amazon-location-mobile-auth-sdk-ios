// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyTimestamps
import Foundation/*.Date*/
import Foundation/*.DateFormatter*/
import Foundation/*.Locale*/
import Foundation/*.TimeZone*/
import Foundation/*.floor*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias DateFormatter = Foundation.DateFormatter
public enum TimestampFormat : Swift.CaseIterable {
  case epochSeconds
  case dateTime
  case httpDate
  public static func == (a: SmithyTimestamps.TimestampFormat, b: SmithyTimestamps.TimestampFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SmithyTimestamps.TimestampFormat]
  public static var allCases: [SmithyTimestamps.TimestampFormat] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TimestampFormatter {
  public init(format: SmithyTimestamps.TimestampFormat)
  public func string(from date: Foundation.Date) -> Swift.String
  public func date(from string: Swift.String) -> Foundation.Date?
}
extension SmithyTimestamps.TimestampFormat : Swift.Equatable {}
extension SmithyTimestamps.TimestampFormat : Swift.Hashable {}
