// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name aws_sdk_swift -module-name AWSClientRuntime
import AWSSDKChecksums
import AWSSDKCommon
import AWSSDKIdentity
import AwsCCal
import AwsCommonRuntimeKit
import AwsCommonRuntimeKit/*.CommonRunTimeError*/
import AwsCommonRuntimeKit/*.CommonRuntimeKit*/
import ClientRuntime
import ClientRuntime/*.ApplyEndpoint*/
import ClientRuntime/*.BaseError*/
import ClientRuntime/*.BaseErrorDecodeError*/
import ClientRuntime/*.ClientLogMode*/
import ClientRuntime/*.DefaultEndpointsAuthSchemeResolver*/
import ClientRuntime/*.DefaultRetryErrorInfoProvider*/
import ClientRuntime/*.DefaultSDKRuntimeConfiguration*/
import ClientRuntime/*.EndpointsAuthScheme*/
import ClientRuntime/*.EndpointsAuthSchemeResolver*/
import ClientRuntime/*.EndpointsRequestContextProviding*/
import ClientRuntime/*.HTTPError*/
import ClientRuntime/*.Handler*/
import ClientRuntime/*.HttpClientConfiguration*/
import ClientRuntime/*.IdempotencyTokenGenerator*/
import ClientRuntime/*.Middleware*/
import ClientRuntime/*.ModeledError*/
import ClientRuntime/*.OperationOutput*/
import ClientRuntime/*.ServiceError*/
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.Data*/
import Foundation/*.ProcessInfo*/
import Foundation/*.TimeInterval*/
import Foundation/*.URL*/
import Smithy
import Smithy/*.ClientError*/
import Smithy/*.Context*/
import Smithy/*.SwiftLogger*/
import Smithy/*.URIScheme*/
import SmithyChecksums/*.ChecksumMismatchException*/
import SmithyChecksumsAPI/*.ChecksumAlgorithm*/
import SmithyHTTPAPI
import SmithyHTTPAPI/*.Endpoint*/
import SmithyHTTPAPI/*.HTTPClient*/
import SmithyHTTPAPI/*.HttpResponse*/
import SmithyHTTPAPI/*.SdkHttpRequest*/
import SmithyHTTPAPI/*.SdkHttpRequestBuilder*/
import SmithyHTTPAuthAPI/*.SelectedAuthScheme*/
import SmithyHTTPAuthAPI/*.SigningAlgorithm*/
import SmithyHTTPAuthAPI/*.SigningPropertyKeys*/
import SmithyIdentity
import SmithyIdentityAPI
import SmithyJSON/*.Reader*/
import SmithyRetries/*.DefaultRetryStrategy*/
import SmithyRetries/*.ExponentialBackoffStrategy*/
import SmithyRetriesAPI/*.RetryErrorInfo*/
import SmithyRetriesAPI/*.RetryErrorInfoProvider*/
import SmithyRetriesAPI/*.RetryStrategyOptions*/
import SmithyXML/*.Reader*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class AWSClientConfigDefaultsProvider {
  public static let httpClientEngine: any SmithyHTTPAPI.HTTPClient
  public static let httpClientConfiguration: ClientRuntime.HttpClientConfiguration
  public static let idempotencyTokenGenerator: any ClientRuntime.IdempotencyTokenGenerator
  public static let clientLogMode: ClientRuntime.ClientLogMode
  public static func awsCredentialIdentityResolver(_ awsCredentialIdentityResolver: (any SmithyIdentity.AWSCredentialIdentityResolver)? = nil) throws -> any SmithyIdentity.AWSCredentialIdentityResolver
  #if compiler(>=5.3) && $AsyncAwait
  public static func region(_ region: Swift.String? = nil) async throws -> Swift.String?
  #endif
  public static func appID(_ appID: Swift.String? = nil) throws -> Swift.String?
  public static func retryMode(_ retryMode: AWSClientRuntime.AWSRetryMode? = nil) throws -> AWSClientRuntime.AWSRetryMode
  public static func retryStrategyOptions() throws -> SmithyRetriesAPI.RetryStrategyOptions
  @objc deinit
}
public protocol AWSDefaultClientConfiguration {
  var awsCredentialIdentityResolver: any SmithyIdentity.AWSCredentialIdentityResolver { get set }
  var useFIPS: Swift.Bool? { get set }
  var useDualStack: Swift.Bool? { get set }
  var appID: Swift.String? { get set }
  var awsRetryMode: AWSClientRuntime.AWSRetryMode { get set }
}
public protocol AWSRegionClientConfiguration {
  var region: Swift.String? { get set }
  var signingRegion: Swift.String? { get set }
}
public struct AWSEndpoint : Swift.Equatable {
  public let endpoint: SmithyHTTPAPI.Endpoint
  public let isHostnameImmutable: Swift.Bool
  public let signingName: Swift.String?
  public let signingRegion: Swift.String?
  public init(endpoint: SmithyHTTPAPI.Endpoint, isHostnameImmutable: Swift.Bool = false, signingName: Swift.String? = nil, signingRegion: Swift.String? = nil)
  public static func resolveEndpoint(partitions: [AWSClientRuntime.Partition], region: Swift.String) throws -> AWSClientRuntime.AWSEndpoint
  public static func == (a: AWSClientRuntime.AWSEndpoint, b: AWSClientRuntime.AWSEndpoint) -> Swift.Bool
}
public let awsPartitionJSON: Swift.String
public struct EndpointResolverMiddleware<OperationStackOutput, Params> : ClientRuntime.Middleware where Params : ClientRuntime.EndpointsRequestContextProviding {
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public let id: Swift.String
  public init(endpointResolverBlock: @escaping (Params) throws -> SmithyHTTPAPI.Endpoint, endpointParams: Params, authSchemeResolver: any ClientRuntime.EndpointsAuthSchemeResolver = DefaultEndpointsAuthSchemeResolver())
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
}
extension AWSClientRuntime.EndpointResolverMiddleware : ClientRuntime.ApplyEndpoint {
  #if compiler(>=5.3) && $AsyncAwait
  public func apply(request: SmithyHTTPAPI.SdkHttpRequest, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Smithy.Context) async throws -> SmithyHTTPAPI.SdkHttpRequest
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
}
public struct Partition {
  public init(id: Swift.String, regionRegex: Swift.String, partitionEndpoint: Swift.String, isRegionalized: Swift.Bool, defaults: ClientRuntime.ServiceEndpointMetadata, endpoints: [Swift.String : ClientRuntime.ServiceEndpointMetadata])
  public func canResolveEndpoint(region: Swift.String) -> Swift.Bool
  public func resolveEndpoint(region: Swift.String) throws -> AWSClientRuntime.AWSEndpoint
  public func endpointDefinitionForRegion(region: Swift.String) -> ClientRuntime.ServiceEndpointMetadata
}
public protocol Environment {
  func environmentVariable(key: Swift.String) -> Swift.String?
}
public protocol AWSS3ServiceError : AWSClientRuntime.AWSServiceError {
  var requestID2: Swift.String? { get }
}
public protocol AWSServiceError : ClientRuntime.ServiceError {
  var errorCode: Swift.String? { get }
  var requestID: Swift.String? { get }
}
extension AWSClientRuntime.AWSServiceError {
  public var errorCode: Swift.String? {
    get
  }
}
public struct InvalidAccessKeyId : AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {
  public var httpResponse: SmithyHTTPAPI.HttpResponse
  public var requestID: Swift.String?
  public var requestID2: Swift.String?
  public var message: Swift.String?
}
extension SmithyHTTPAPI.HttpResponse {
  public var requestId: Swift.String? {
    get
  }
  public var requestId2: Swift.String? {
    get
  }
}
public class IMDSClient {
  public init(config: AWSClientRuntime.IMDSConfig = IMDSConfig()) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func get(path: Swift.String) async throws -> Swift.String?
  #endif
  @objc deinit
}
public struct IMDSConfig {
  public init(retries: Swift.Int = 3)
}
public struct AWSS3ErrorWith200StatusXMLMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequest, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequest
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension AWSClientRuntime.AWSS3ErrorWith200StatusXMLMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeDeserialization(context: some MutableResponse<`Self`.InputType, `Self`.RequestType, `Self`.ResponseType, `Self`.AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct FlexibleChecksumsRequestMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(checksumAlgorithm: Swift.String?)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension AWSClientRuntime.FlexibleChecksumsRequestMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeRetryLoop(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct FlexibleChecksumsResponseMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(validationMode: Swift.Bool, priorityList: [Swift.String] = [])
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequest, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequest
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension AWSClientRuntime.FlexibleChecksumsResponseMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeRetryLoop(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeDeserialization(context: some MutableResponse<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct Route53TrimHostedZoneMiddleware<Input, Output> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(_ hostedZoneIDKeyPath: Swift.WritableKeyPath<Input, Swift.String?>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: Input, next: H) async throws -> ClientRuntime.OperationOutput<Output> where Input == H.Input, H : ClientRuntime.Handler, H.Output == ClientRuntime.OperationOutput<Output>
  #endif
  public typealias MInput = Input
  public typealias MOutput = ClientRuntime.OperationOutput<Output>
}
extension AWSClientRuntime.Route53TrimHostedZoneMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = Input
  public typealias OutputType = Output
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeSerialization(context: some MutableInput<`Self`.InputType, `Self`.AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct Sha256TreeHashMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: AWSClientRuntime.Sha256TreeHashMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> AWSClientRuntime.Sha256TreeHashMiddleware<OperationStackInput, OperationStackOutput>.MOutput where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension AWSClientRuntime.Sha256TreeHashMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeTransmit(context: some MutableRequest<`Self`.InputType, `Self`.RequestType, `Self`.AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct UserAgentMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(metadata: AWSClientRuntime.AWSUserAgentMetadata)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension AWSClientRuntime.UserAgentMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeRetryLoop(context: some MutableRequest<`Self`.InputType, SdkHttpRequest, Context>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct XAmzTargetMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(xAmzTarget: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension AWSClientRuntime.XAmzTargetMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeRetryLoop(context: some MutableRequest<`Self`.InputType, `Self`.RequestType, `Self`.AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public class DefaultAWSClientPlugin : ClientRuntime.Plugin {
  public init(clientName: Swift.String)
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration) throws
  @objc deinit
}
public class RegionPlugin : ClientRuntime.Plugin {
  public init(_ region: Swift.String)
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration)
  @objc deinit
}
extension Swift.Double {
  public static func minutes(_ minutes: Swift.Double) -> Foundation.TimeInterval
}
public struct AWSJSONError : ClientRuntime.BaseError {
  public let code: Swift.String
  public let message: Swift.String?
  public let requestID: Swift.String?
  public var errorBodyReader: SmithyJSON.Reader {
    get
  }
  public let httpResponse: SmithyHTTPAPI.HttpResponse
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, responseReader: SmithyJSON.Reader, noErrorWrapping: Swift.Bool) throws
}
public struct AWSQueryError : ClientRuntime.BaseError {
  public let code: Swift.String
  public let message: Swift.String?
  public let requestID: Swift.String?
  public let httpResponse: SmithyHTTPAPI.HttpResponse
  public let responseReader: SmithyXML.Reader
  public let errorBodyReader: SmithyXML.Reader
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, responseReader: SmithyXML.Reader, noErrorWrapping: Swift.Bool) throws
}
public enum AWSQueryDecodeError : Swift.Error {
  case missingRequiredData
  public static func == (a: AWSClientRuntime.AWSQueryDecodeError, b: AWSClientRuntime.AWSQueryDecodeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EC2QueryError : ClientRuntime.BaseError {
  public let code: Swift.String
  public let message: Swift.String?
  public let requestID: Swift.String?
  public let errorBodyReader: SmithyXML.Reader
  public let httpResponse: SmithyHTTPAPI.HttpResponse
  public let responseReader: SmithyXML.Reader
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, responseReader: SmithyXML.Reader, noErrorWrapping: Swift.Bool) throws
}
public struct RestJSONError : ClientRuntime.BaseError {
  public let code: Swift.String
  public let message: Swift.String?
  public let requestID: Swift.String?
  public let httpResponse: SmithyHTTPAPI.HttpResponse
  public var errorBodyReader: SmithyJSON.Reader {
    get
  }
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, responseReader: SmithyJSON.Reader, noErrorWrapping: Swift.Bool) throws
}
public struct RestXMLError : ClientRuntime.BaseError {
  public let code: Swift.String
  public let message: Swift.String?
  public let requestID: Swift.String?
  public var requestID2: Swift.String? {
    get
  }
  public let httpResponse: SmithyHTTPAPI.HttpResponse
  public let errorBodyReader: SmithyXML.Reader
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, responseReader: SmithyXML.Reader, noErrorWrapping: Swift.Bool) throws
}
public struct StaticRegionResolver : AWSClientRuntime.RegionResolver {
  public let providers: [any AWSClientRuntime.RegionProvider]
  public init(_ region: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func getRegion() async -> Swift.String?
  #endif
}
public struct EnvironmentRegionProvider : AWSClientRuntime.RegionProvider {
  public init(env: any AWSClientRuntime.Environment = ProcessEnvironment())
  public func getRegion() throws -> Swift.String?
}
public struct ProcessEnvironment : AWSClientRuntime.Environment {
  public init()
  public func environmentVariable(key: Swift.String) -> Swift.String?
}
public struct IMDSRegionProvider : AWSClientRuntime.RegionProvider {
  public init() throws
  #if compiler(>=5.3) && $AsyncAwait
  public func getRegion() async throws -> Swift.String?
  #endif
}
public protocol RegionProvider {
  #if compiler(>=5.3) && $AsyncAwait
  func getRegion() async throws -> Swift.String?
  #endif
}
public protocol RegionResolver {
  var providers: [any AWSClientRuntime.RegionProvider] { get }
  #if compiler(>=5.3) && $AsyncAwait
  func getRegion() async -> Swift.String?
  #endif
}
public enum AWSRetryConfig {
}
public enum AWSRetryErrorInfoProvider : SmithyRetriesAPI.RetryErrorInfoProvider {
  public static func errorInfo(for error: any Swift.Error) -> SmithyRetriesAPI.RetryErrorInfo?
}
public enum AWSRetryMode : Swift.String {
  case legacy
  case standard
  case adaptive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AWSUserAgentMetadata {
  public static func fromConfig(serviceID: Swift.String, version: Swift.String, config: any AWSClientRuntime.AWSDefaultClientConfiguration & ClientRuntime.DefaultClientConfiguration) -> AWSClientRuntime.AWSUserAgentMetadata
}
public enum Utils {
  public static func setupCRT()
}
extension AWSClientRuntime.AWSQueryDecodeError : Swift.Equatable {}
extension AWSClientRuntime.AWSQueryDecodeError : Swift.Hashable {}
extension AWSClientRuntime.AWSRetryMode : Swift.Equatable {}
extension AWSClientRuntime.AWSRetryMode : Swift.Hashable {}
extension AWSClientRuntime.AWSRetryMode : Swift.RawRepresentable {}
