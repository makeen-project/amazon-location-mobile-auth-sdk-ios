// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name ClientRuntime
import AwsCommonRuntimeKit
import Darwin
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.CFWriteStreamSetDispatchQueue*/
import Foundation/*.CharacterSet*/
import Foundation/*.Data*/
import Foundation/*.Date*/
import Foundation/*.DateFormatter*/
import Foundation/*.DispatchQueue*/
import Foundation/*.FileHandle*/
import Foundation/*.HTTPURLResponse*/
import Foundation/*.InputStream*/
import Foundation/*.Locale*/
import Foundation/*.NSObject*/
import Foundation/*.NSRecursiveLock*/
import Foundation/*.NSURLAuthenticationMethodClientCertificate*/
import Foundation/*.NSURLAuthenticationMethodServerTrust*/
import Foundation/*.OutputStream*/
import Foundation/*.ProcessInfo*/
import Foundation/*.RunLoop*/
import Foundation/*.Stream*/
import Foundation/*.StreamDelegate*/
import Foundation/*.Thread*/
import Foundation/*.TimeInterval*/
import Foundation/*.TimeZone*/
import Foundation/*.Timer*/
import Foundation/*.URL*/
import Foundation/*.URLAuthenticationChallenge*/
import Foundation/*.URLComponents*/
import Foundation/*.URLCredential*/
import Foundation/*.URLQueryItem*/
import Foundation/*.URLRequest*/
import Foundation/*.URLResponse*/
import Foundation/*.URLSession*/
import Foundation/*.URLSessionConfiguration*/
import Foundation/*.URLSessionDataDelegate*/
import Foundation/*.URLSessionDataTask*/
import Foundation/*.URLSessionTask*/
import Foundation/*.UUID*/
import Logging
import Security
import Smithy
import Smithy/*.AttributeKey*/
import Smithy/*.Attributes*/
import Smithy/*.ByteStream*/
import Smithy/*.ByteStreamError*/
import Smithy/*.ClientError*/
import Smithy/*.Context*/
import Smithy/*.ContextBuilder*/
import Smithy/*.HasAttributes*/
import Smithy/*.LogAgent*/
import Smithy/*.ReadableStream*/
import Smithy/*.RequestMessage*/
import Smithy/*.RequestMessageSerializer*/
import Smithy/*.ResponseMessage*/
import Smithy/*.ResponseMessageDeserializer*/
import Smithy/*.Stream*/
import Smithy/*.StreamError*/
import Smithy/*.SwiftLogger*/
import Smithy/*.URI*/
import Smithy/*.URIQueryItem*/
import Smithy/*.URIScheme*/
import SmithyChecksums
import SmithyChecksums/*.ChunkedStream*/
import SmithyChecksums/*.ValidatingBufferedStream*/
import SmithyChecksumsAPI/*.ChecksumAlgorithm*/
import SmithyEventStreams
import SmithyEventStreamsAPI
import SmithyEventStreamsAuthAPI
import SmithyHTTPAPI
import SmithyHTTPAPI/*.ALPNProtocol*/
import SmithyHTTPAPI/*.Endpoint*/
import SmithyHTTPAPI/*.HTTPClient*/
import SmithyHTTPAPI/*.HTTPClientError*/
import SmithyHTTPAPI/*.Headers*/
import SmithyHTTPAPI/*.HttpResponse*/
import SmithyHTTPAPI/*.HttpStatusCode*/
import SmithyHTTPAPI/*.SdkHttpRequest*/
import SmithyHTTPAPI/*.SdkHttpRequestBuilder*/
import SmithyHTTPAuth/*.DefaultIdentityResolverConfiguration*/
import SmithyHTTPAuthAPI
import SmithyHTTPAuthAPI/*.AuthOption*/
import SmithyHTTPAuthAPI/*.AuthScheme*/
import SmithyHTTPAuthAPI/*.AuthSchemeResolver*/
import SmithyHTTPAuthAPI/*.AuthSchemeResolverParameters*/
import SmithyHTTPAuthAPI/*.SelectedAuthScheme*/
import SmithyHTTPAuthAPI/*.SigningAlgorithm*/
import SmithyHTTPAuthAPI/*.SigningPropertyKeys*/
import SmithyReadWrite
import SmithyReadWrite/*.SmithyWriter*/
import SmithyReadWrite/*.WireDataProviding*/
import SmithyReadWrite/*.WritingClosure*/
import SmithyRetries/*.DefaultRetryStrategy*/
import SmithyRetries/*.ExponentialBackoffStrategy*/
import SmithyRetriesAPI/*.RetryErrorInfo*/
import SmithyRetriesAPI/*.RetryErrorInfoProvider*/
import SmithyRetriesAPI/*.RetryErrorType*/
import SmithyRetriesAPI/*.RetryStrategy*/
import SmithyRetriesAPI/*.RetryStrategyOptions*/
import SmithyStreams/*.BufferedStream*/
import SmithyStreams/*.FileStream*/
import SmithyStreams/*.StreamableHttpBody*/
import SmithyTimestamps/*.TimestampFormat*/
import SmithyTimestamps/*.TimestampFormatter*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol Client {
  associatedtype Config : ClientRuntime.ClientConfiguration
  init(config: Self.Config)
}
public class ClientBuilder<ClientType> where ClientType : ClientRuntime.Client {
  public init(defaultPlugins: [any ClientRuntime.Plugin] = [])
  public func withPlugin(_ plugin: any ClientRuntime.Plugin) -> ClientRuntime.ClientBuilder<ClientType>
  #if compiler(>=5.3) && $AsyncAwait
  public func build() async throws -> ClientType
  #endif
  @objc deinit
}
public protocol ClientConfiguration {
  #if compiler(>=5.3) && $AsyncAwait
  init() async throws
  #endif
}
public protocol DefaultClientConfiguration : ClientRuntime.ClientConfiguration {
  var retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions { get set }
  var clientLogMode: ClientRuntime.ClientLogMode { get set }
  var endpoint: Swift.String? { get set }
  var idempotencyTokenGenerator: any ClientRuntime.IdempotencyTokenGenerator { get set }
  var telemetryProvider: any ClientRuntime.TelemetryProvider { get set }
}
public protocol DefaultHttpClientConfiguration : ClientRuntime.ClientConfiguration {
  var httpClientEngine: any SmithyHTTPAPI.HTTPClient { get set }
  var httpClientConfiguration: ClientRuntime.HttpClientConfiguration { get set }
  var authSchemes: [any SmithyHTTPAuthAPI.AuthScheme]? { get set }
  var authSchemeResolver: any SmithyHTTPAuthAPI.AuthSchemeResolver { get set }
}
public struct DefaultIdempotencyTokenGenerator : ClientRuntime.IdempotencyTokenGenerator {
  public init()
  public func generateToken() -> Swift.String
}
public struct DefaultSDKRuntimeConfiguration<DefaultSDKRuntimeRetryStrategy, DefaultSDKRuntimeRetryErrorInfoProvider> where DefaultSDKRuntimeRetryStrategy : SmithyRetriesAPI.RetryStrategy, DefaultSDKRuntimeRetryErrorInfoProvider : SmithyRetriesAPI.RetryErrorInfoProvider {
  public var serviceName: Swift.String
  public var clientName: Swift.String
  public var httpClientEngine: any SmithyHTTPAPI.HTTPClient
  public var httpClientConfiguration: ClientRuntime.HttpClientConfiguration
  public var idempotencyTokenGenerator: any ClientRuntime.IdempotencyTokenGenerator
  public var telemetryProvider: any ClientRuntime.TelemetryProvider
  public var retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions
  public var clientLogMode: ClientRuntime.ClientLogMode
  public var endpoint: Swift.String?
  public init(serviceName: Swift.String, clientName: Swift.String) throws
}
extension ClientRuntime.DefaultSDKRuntimeConfiguration {
  public static func makeClient(httpClientConfiguration: ClientRuntime.HttpClientConfiguration = defaultHttpClientConfiguration) -> any SmithyHTTPAPI.HTTPClient
  public static var defaultHttpClientConfiguration: ClientRuntime.HttpClientConfiguration {
    get
  }
  public static var defaultIdempotencyTokenGenerator: any ClientRuntime.IdempotencyTokenGenerator {
    get
  }
  public static var defaultRetryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions {
    get
  }
  public static var defaultClientLogMode: ClientRuntime.ClientLogMode {
    get
  }
  public static var defaultAuthSchemeResolver: any SmithyHTTPAuthAPI.AuthSchemeResolver {
    get
  }
}
public class DefaultAuthSchemeResolverParameters : SmithyHTTPAuthAPI.AuthSchemeResolverParameters {
  public var operation: Swift.String
  public init(operation: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultAuthSchemeResolver : SmithyHTTPAuthAPI.AuthSchemeResolver {
  public func resolveAuthScheme(params: any SmithyHTTPAuthAPI.AuthSchemeResolverParameters) throws -> [SmithyHTTPAuthAPI.AuthOption]
  public func constructParameters(context: Smithy.Context) throws -> any SmithyHTTPAuthAPI.AuthSchemeResolverParameters
  @objc deinit
}
public typealias ClientConfigurationDefaults = ClientRuntime.DefaultSDKRuntimeConfiguration<SmithyRetries.DefaultRetryStrategy, ClientRuntime.DefaultRetryErrorInfoProvider>
public protocol IdempotencyTokenGenerator {
  func generateToken() -> Swift.String
}
@_hasMissingDesignatedInitializers public class CRTResolvedEndpoint {
  public func getType() -> ClientRuntime.CRTResolvedEndpointType
  public func getError() -> Swift.String?
  public func getURL() -> Swift.String?
  public func getProperties() -> [Swift.String : Swift.AnyHashable]?
  public func getHeaders() -> [Swift.String : [Swift.String]]?
  @objc deinit
}
public enum CRTResolvedEndpointType {
  case error
  case endpoint
  public static func == (a: ClientRuntime.CRTResolvedEndpointType, b: ClientRuntime.CRTResolvedEndpointType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CredentialScope {
  public let region: Swift.String?
  public let serviceId: Swift.String?
  public init(region: Swift.String? = nil, serviceId: Swift.String? = nil)
}
public struct DefaultEndpointResolver<Params> where Params : ClientRuntime.EndpointsRequestContextProviding {
  public init(partitions: Swift.String, ruleSet: Swift.String) throws
  public func resolve(params: Params) throws -> SmithyHTTPAPI.Endpoint
}
public enum EndpointError : Swift.Error {
  case hostnameIsNil(Swift.String)
  case partitionsEmpty(Swift.String)
  case unresolved(Swift.String?)
  case authScheme(Swift.String?)
}
public struct EndpointResolverMiddleware<OperationStackOutput, Params> : ClientRuntime.Middleware where Params : ClientRuntime.EndpointsRequestContextProviding {
  public let id: Swift.String
  public init(endpointResolverBlock: @escaping (Params) throws -> SmithyHTTPAPI.Endpoint, endpointParams: Params, authSchemeResolver: any ClientRuntime.EndpointsAuthSchemeResolver = DefaultEndpointsAuthSchemeResolver())
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.EndpointResolverMiddleware : ClientRuntime.ApplyEndpoint {
  #if compiler(>=5.3) && $AsyncAwait
  public func apply(request: SmithyHTTPAPI.SdkHttpRequest, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Smithy.Context) async throws -> SmithyHTTPAPI.SdkHttpRequest
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
}
public enum EndpointsAuthScheme : Swift.Equatable {
  case sigV4(ClientRuntime.EndpointsAuthScheme.SigV4Parameters)
  case sigV4A(ClientRuntime.EndpointsAuthScheme.SigV4AParameters)
  case none
  public var name: Swift.String {
    get
  }
  public static func == (a: ClientRuntime.EndpointsAuthScheme, b: ClientRuntime.EndpointsAuthScheme) -> Swift.Bool
}
extension ClientRuntime.EndpointsAuthScheme {
  public init(from dictionary: [Swift.String : Any]) throws
}
extension ClientRuntime.EndpointsAuthScheme {
  public struct SigV4Parameters : Swift.Equatable {
    public let signingName: Swift.String?
    public let signingRegion: Swift.String?
    public let disableDoubleEncoding: Swift.Bool?
    public static func == (a: ClientRuntime.EndpointsAuthScheme.SigV4Parameters, b: ClientRuntime.EndpointsAuthScheme.SigV4Parameters) -> Swift.Bool
  }
}
extension ClientRuntime.EndpointsAuthScheme {
  public struct SigV4AParameters : Swift.Equatable {
    public let signingName: Swift.String?
    public let signingRegionSet: [Swift.String]?
    public let disableDoubleEncoding: Swift.Bool?
    public static func == (a: ClientRuntime.EndpointsAuthScheme.SigV4AParameters, b: ClientRuntime.EndpointsAuthScheme.SigV4AParameters) -> Swift.Bool
  }
}
public protocol EndpointsAuthSchemeResolver {
  func resolve(authSchemes: [ClientRuntime.EndpointsAuthScheme]) throws -> ClientRuntime.EndpointsAuthScheme
}
public struct DefaultEndpointsAuthSchemeResolver : ClientRuntime.EndpointsAuthSchemeResolver {
  public init(supportedAuthSchemes: Swift.Set<Swift.String> = ["sigv4", "sigv4a", "none"])
  public func resolve(authSchemes: [ClientRuntime.EndpointsAuthScheme]) throws -> ClientRuntime.EndpointsAuthScheme
}
public class EndpointsRequestContext {
  public init() throws
  public func add(name: Swift.String, value: Swift.String?) throws
  public func add(name: Swift.String, value: Swift.Bool?) throws
  public func toCRT() -> AwsCommonRuntimeKit.EndpointsRequestContext
  @objc deinit
}
public protocol EndpointsRequestContextProviding {
  #if compiler(>=5.3) && $EffectfulProp
  var context: ClientRuntime.EndpointsRequestContext { get throws }
  #endif
}
public class EndpointsRuleEngine {
  public init(partitions: Swift.String = partitionJSON, ruleSet: Swift.String) throws
  public func resolve(context: ClientRuntime.EndpointsRequestContext) throws -> ClientRuntime.CRTResolvedEndpoint?
  @objc deinit
}
public let partitionJSON: Swift.String
public struct ServiceEndpointMetadata {
  public let defaultProtocol: Swift.String
  public let defaultSigner: Swift.String
  public let protocolPriority: [Swift.String]
  public let signerPriority: [Swift.String]
  public let hostName: Swift.String?
  public let protocols: [Swift.String]
  public let credentialScope: ClientRuntime.CredentialScope?
  public let signatureVersions: [Swift.String]
  public init(hostName: Swift.String? = nil, protocols: [Swift.String] = [], credentialScope: ClientRuntime.CredentialScope? = nil, signatureVersions: [Swift.String] = [])
}
public struct SmithyEndpoint : Swift.Equatable {
  public let endpoint: SmithyHTTPAPI.Endpoint
  public let isHostnameImmutable: Swift.Bool
  public let signingName: Swift.String?
  public init(endpoint: SmithyHTTPAPI.Endpoint, isHostnameImmutable: Swift.Bool = false, signingName: Swift.String? = nil)
  public static func == (a: ClientRuntime.SmithyEndpoint, b: ClientRuntime.SmithyEndpoint) -> Swift.Bool
}
extension Smithy.Context {
  public func getIdempotencyTokenGenerator() -> any ClientRuntime.IdempotencyTokenGenerator
}
extension Smithy.ContextBuilder {
  @discardableResult
  public func withIdempotencyTokenGenerator(value: any ClientRuntime.IdempotencyTokenGenerator) -> Self
}
public struct IdempotencyTokenMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(keyPath: Swift.WritableKeyPath<OperationStackInput, Swift.String?>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.IdempotencyTokenMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.IdempotencyTokenMiddleware<OperationStackInput, OperationStackOutput>.MOutput where OperationStackInput == H.Input, H : ClientRuntime.Handler, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = OperationStackInput
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.IdempotencyTokenMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeSerialization(context: some MutableInput<InputType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public class DefaultInterceptorContext<InputType, OutputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext where RequestType : Smithy.RequestMessage, ResponseType : Smithy.ResponseMessage, AttributesType : Smithy.HasAttributes {
  public init(input: InputType, attributes: AttributesType)
  public func getInput() -> InputType
  public func getAttributes() -> AttributesType
  @objc deinit
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.BeforeSerialization {
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.MutableInput {
  public func updateInput(updated: InputType)
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.AfterSerialization {
  public func getRequest() -> RequestType
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.MutableRequest {
  public func updateRequest(updated: RequestType)
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.BeforeDeserialization {
  public func getResponse() -> ResponseType
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.MutableResponse {
  public func updateResponse(updated: ResponseType)
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.AfterDeserialization {
  public func getResult() -> Swift.Result<OutputType, any Swift.Error>
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.AfterAttempt {
  public func getResponse() -> ResponseType?
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.MutableOutputAfterAttempt {
  public func updateResult(updated: Swift.Result<OutputType, any Swift.Error>)
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.Finalization {
  public func getRequest() -> RequestType?
}
extension ClientRuntime.DefaultInterceptorContext : ClientRuntime.MutableOutputFinalization {
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol HttpInterceptor<InputType, OutputType> : ClientRuntime.Interceptor where Self.AttributesType == Smithy.Context, Self.RequestType == SmithyHTTPAPI.SdkHttpRequest, Self.ResponseType == SmithyHTTPAPI.HttpResponse {
}
#else
public protocol HttpInterceptor : ClientRuntime.Interceptor where Self.AttributesType == Smithy.Context, Self.RequestType == SmithyHTTPAPI.SdkHttpRequest, Self.ResponseType == SmithyHTTPAPI.HttpResponse {
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol Interceptor<InputType, OutputType, RequestType, ResponseType, AttributesType> {
  associatedtype InputType
  associatedtype OutputType
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype ResponseType : Smithy.ResponseMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeExecution(context: some BeforeSerialization<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeSerialization(context: some MutableInput<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeSerialization(context: some BeforeSerialization<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterSerialization(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeRetryLoop(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeAttempt(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeSigning(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeSigning(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterSigning(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeTransmit(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeTransmit(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterTransmit(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeDeserialization(context: some MutableResponse<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeDeserialization(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterDeserialization(context: some AfterDeserialization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeAttemptCompletion(context: some MutableOutputAfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterAttempt(context: some AfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeCompletion(context: some MutableOutputFinalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterExecution(context: some Finalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
}
#else
public protocol Interceptor {
  associatedtype InputType
  associatedtype OutputType
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype ResponseType : Smithy.ResponseMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeExecution(context: some BeforeSerialization<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeSerialization(context: some MutableInput<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeSerialization(context: some BeforeSerialization<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterSerialization(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeRetryLoop(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeAttempt(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeSigning(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeSigning(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterSigning(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeTransmit(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeTransmit(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterTransmit(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeDeserialization(context: some MutableResponse<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readBeforeDeserialization(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterDeserialization(context: some AfterDeserialization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeAttemptCompletion(context: some MutableOutputAfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterAttempt(context: some AfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func modifyBeforeCompletion(context: some MutableOutputFinalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func readAfterExecution(context: some Finalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
}
#endif
extension ClientRuntime.Interceptor {
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeExecution(context: some BeforeSerialization<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeSerialization(context: some MutableInput<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeSerialization(context: some BeforeSerialization<InputType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterSerialization(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeRetryLoop(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeAttempt(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeSigning(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeSigning(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterSigning(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeTransmit(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeTransmit(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterTransmit(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeDeserialization(context: some MutableResponse<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeDeserialization(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterDeserialization(context: some AfterDeserialization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeAttemptCompletion(context: some MutableOutputAfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterAttempt(context: some AfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeCompletion(context: some MutableOutputFinalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterExecution(context: some Finalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
}
public protocol InterceptorContext : AnyObject {
  associatedtype InputType
  associatedtype OutputType
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype ResponseType : Smithy.ResponseMessage
  associatedtype AttributesType : Smithy.HasAttributes
  func getInput() -> Self.InputType
  func getAttributes() -> Self.AttributesType
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol BeforeSerialization<InputType, AttributesType> : ClientRuntime.InterceptorContext {
}
#else
public protocol BeforeSerialization : ClientRuntime.InterceptorContext {
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol MutableInput<InputType, AttributesType> : ClientRuntime.InterceptorContext {
  func updateInput(updated: Self.InputType)
}
#else
public protocol MutableInput : ClientRuntime.InterceptorContext {
  func updateInput(updated: Self.InputType)
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol AfterSerialization<InputType, RequestType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
}
#else
public protocol AfterSerialization : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol MutableRequest<InputType, RequestType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func updateRequest(updated: Self.RequestType)
}
#else
public protocol MutableRequest : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func updateRequest(updated: Self.RequestType)
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType
}
#else
public protocol BeforeDeserialization : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol MutableResponse<InputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType
  func updateResponse(updated: Self.ResponseType)
}
#else
public protocol MutableResponse : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType
  func updateResponse(updated: Self.ResponseType)
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol AfterDeserialization<InputType, OutputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
}
#else
public protocol AfterDeserialization : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol AfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
}
#else
public protocol AfterAttempt : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol MutableOutputAfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
  func updateResult(updated: Swift.Result<Self.OutputType, any Swift.Error>)
}
#else
public protocol MutableOutputAfterAttempt : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
  func updateResult(updated: Swift.Result<Self.OutputType, any Swift.Error>)
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol Finalization<InputType, OutputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType?
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
}
#else
public protocol Finalization : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType?
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol MutableOutputFinalization<InputType, OutputType, RequestType, ResponseType, AttributesType> : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType?
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
  func updateResult(updated: Swift.Result<Self.OutputType, any Swift.Error>)
}
#else
public protocol MutableOutputFinalization : ClientRuntime.InterceptorContext {
  func getRequest() -> Self.RequestType?
  func getResponse() -> Self.ResponseType?
  func getResult() -> Swift.Result<Self.OutputType, any Swift.Error>
  func updateResult(updated: Swift.Result<Self.OutputType, any Swift.Error>)
}
#endif
public struct Interceptors<InputType, OutputType, RequestType, ResponseType, AttributesType> where RequestType : Smithy.RequestMessage, ResponseType : Smithy.ResponseMessage, AttributesType : Smithy.HasAttributes {
  public mutating func add(_ interceptor: any ClientRuntime.Interceptor<InputType, OutputType, RequestType, ResponseType, AttributesType>)
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadBeforeExecution(_ interceptorFn: @escaping (any ClientRuntime.BeforeSerialization<InputType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeSerialization(_ interceptorFn: @escaping (any ClientRuntime.MutableInput<InputType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadBeforeSerialization(_ interceptorFn: @escaping (any ClientRuntime.BeforeSerialization<InputType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadAfterSerialization(_ interceptorFn: @escaping (any ClientRuntime.AfterSerialization<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeRetryLoop(_ interceptorFn: @escaping (any ClientRuntime.MutableRequest<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadBeforeAttempt(_ interceptorFn: @escaping (any ClientRuntime.AfterSerialization<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeSigning(_ interceptorFn: @escaping (any ClientRuntime.MutableRequest<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadBeforeSigning(_ interceptorFn: @escaping (any ClientRuntime.AfterSerialization<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadAfterSigning(_ interceptorFn: @escaping (any ClientRuntime.AfterSerialization<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeTransmit(_ interceptorFn: @escaping (any ClientRuntime.MutableRequest<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadBeforeTransmit(_ interceptorFn: @escaping (any ClientRuntime.AfterSerialization<InputType, RequestType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadAfterTransmit(_ interceptorFn: @escaping (any ClientRuntime.BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeDeserialization(_ interceptorFn: @escaping (any ClientRuntime.MutableResponse<InputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadBeforeDeserialization(_ interceptorFn: @escaping (any ClientRuntime.BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadAfterDeserialization(_ interceptorFn: @escaping (any ClientRuntime.AfterDeserialization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeAttemptCompletion(_ interceptorFn: @escaping (any ClientRuntime.MutableOutputAfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadAfterAttempt(_ interceptorFn: @escaping (any ClientRuntime.AfterAttempt<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addModifyBeforeCompletion(_ interceptorFn: @escaping (any ClientRuntime.MutableOutputFinalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func addReadAfterExecution(_ interceptorFn: @escaping (any ClientRuntime.Finalization<InputType, OutputType, RequestType, ResponseType, AttributesType>) async throws -> Swift.Void)
  #endif
}
public struct AnyHandler<MInput, MOutput> : ClientRuntime.Handler {
  public init<H>(_ realHandler: H) where MInput == H.Input, MOutput == H.Output, H : ClientRuntime.Handler
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: MInput) async throws -> MOutput
  #endif
  public typealias Input = MInput
  public typealias Output = MOutput
}
public struct AnyMiddleware<MInput, MOutput> : ClientRuntime.Middleware {
  public var id: Swift.String
  public init<M>(_ realMiddleware: M) where MInput == M.MInput, MOutput == M.MOutput, M : ClientRuntime.Middleware
  public init<H>(handler: H, id: Swift.String) where MInput == H.Input, MOutput == H.Output, H : ClientRuntime.Handler
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: MInput, next: H) async throws -> MOutput where MInput == H.Input, MOutput == H.Output, H : ClientRuntime.Handler
  #endif
}
public struct ComposedHandler<MInput, MOutput> {
  public init<H, M>(_ realNext: H, _ realWith: M) where MInput == H.Input, MOutput == H.Output, H : ClientRuntime.Handler, M : ClientRuntime.Middleware, H.Input == M.MInput, H.Output == M.MOutput
}
extension ClientRuntime.ComposedHandler : ClientRuntime.Handler {
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: MInput) async throws -> MOutput
  #endif
  public typealias Input = MInput
  public typealias Output = MOutput
}
public protocol Handler {
  associatedtype Input
  associatedtype Output
  #if compiler(>=5.3) && $AsyncAwait
  func handle(context: Smithy.Context, input: Self.Input) async throws -> Self.Output
  #endif
}
extension ClientRuntime.Handler {
  public func eraseToAnyHandler() -> ClientRuntime.AnyHandler<Self.Input, Self.Output>
}
public typealias HandlerFunction<MInput, MOutput, MError> = (Smithy.Context, MInput) -> Swift.Result<MOutput, MError> where MError : Swift.Error
public protocol Middleware {
  associatedtype MInput
  associatedtype MOutput
  var id: Swift.String { get }
  #if compiler(>=5.3) && $AsyncAwait
  func handle<H>(context: Smithy.Context, input: Self.MInput, next: H) async throws -> Self.MOutput where H : ClientRuntime.Handler, Self.MInput == H.Input, Self.MOutput == H.Output
  #endif
}
extension ClientRuntime.Middleware {
  public func eraseToAnyMiddleware() -> ClientRuntime.AnyMiddleware<Self.MInput, Self.MOutput>
}
#if compiler(>=5.3) && $AsyncAwait
public typealias MiddlewareFunction<MInput, MOutput> = (Smithy.Context, MInput, ClientRuntime.AnyHandler<MInput, MOutput>) async throws -> MOutput
#endif
public struct MiddlewareStep<Input, Output> : ClientRuntime.Middleware {
  public typealias MInput = Input
  public typealias MOutput = Output
  public let id: Swift.String
  public init(id: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.MiddlewareStep<Input, Output>.MInput, next: H) async throws -> ClientRuntime.MiddlewareStep<Input, Output>.MOutput where Input == H.Input, Output == H.Output, H : ClientRuntime.Handler
  #endif
  public mutating func intercept<M>(position: ClientRuntime.Position, middleware: M) where Input == M.MInput, Output == M.MOutput, M : ClientRuntime.Middleware
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func intercept(position: ClientRuntime.Position, id: Swift.String, middleware: @escaping ClientRuntime.MiddlewareFunction<ClientRuntime.MiddlewareStep<Input, Output>.MInput, ClientRuntime.MiddlewareStep<Input, Output>.MOutput>)
  #endif
}
public struct NoopHandler<OperationStackOutput> : ClientRuntime.Handler {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequest) async throws -> ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias Input = SmithyHTTPAPI.SdkHttpRequest
  public typealias Output = ClientRuntime.OperationOutput<OperationStackOutput>
}
public struct OperationStack<OperationStackInput, OperationStackOutput> {
  public var id: Swift.String
  public var initializeStep: ClientRuntime.InitializeStep<OperationStackInput, OperationStackOutput>
  public var serializeStep: ClientRuntime.SerializeStep<OperationStackInput, OperationStackOutput>
  public var buildStep: ClientRuntime.BuildStep<OperationStackOutput>
  public var finalizeStep: ClientRuntime.FinalizeStep<OperationStackOutput>
  public var deserializeStep: ClientRuntime.DeserializeStep<OperationStackOutput>
  public init(id: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func handleMiddleware<H>(context: Smithy.Context, input: OperationStackInput, next: H) async throws -> OperationStackOutput where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public mutating func presignedRequest<H>(context: Smithy.Context, input: OperationStackInput, output: OperationStackOutput, next: H) async throws -> SmithyHTTPAPI.SdkHttpRequestBuilder? where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
}
public struct OrderedGroup<Input, Output> {
  public init()
}
public enum Position : Swift.Int {
  case before
  case after
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct RetryMiddleware<Strategy, ErrorInfoProvider, OperationStackOutput> : ClientRuntime.Middleware where Strategy : SmithyRetriesAPI.RetryStrategy, ErrorInfoProvider : SmithyRetriesAPI.RetryErrorInfoProvider {
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public var id: Swift.String {
    get
  }
  public var strategy: Strategy
  public init(options: SmithyRetriesAPI.RetryStrategyOptions)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
}
public typealias BuildStep<OperationStackOutput> = ClientRuntime.MiddlewareStep<SmithyHTTPAPI.SdkHttpRequestBuilder, ClientRuntime.OperationOutput<OperationStackOutput>>
public let BuildStepId: Swift.String
public struct BuildStepHandler<OperationStackOutput, H> : ClientRuntime.Handler where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput> {
  public typealias Input = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias Output = ClientRuntime.OperationOutput<OperationStackOutput>
  public init(handler: H)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: ClientRuntime.BuildStepHandler<OperationStackOutput, H>.Input) async throws -> ClientRuntime.BuildStepHandler<OperationStackOutput, H>.Output
  #endif
}
public typealias DeserializeStep<OperationStackOutput> = ClientRuntime.MiddlewareStep<SmithyHTTPAPI.SdkHttpRequest, ClientRuntime.OperationOutput<OperationStackOutput>>
public let DeserializeStepId: Swift.String
public struct DeserializeStepHandler<OperationStackOutput, H> : ClientRuntime.Handler where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput> {
  public typealias Input = SmithyHTTPAPI.SdkHttpRequest
  public typealias Output = ClientRuntime.OperationOutput<OperationStackOutput>
  public init(handler: H)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: ClientRuntime.DeserializeStepHandler<OperationStackOutput, H>.Input) async throws -> ClientRuntime.DeserializeStepHandler<OperationStackOutput, H>.Output
  #endif
}
public struct OperationOutput<Output> {
  public var httpResponse: SmithyHTTPAPI.HttpResponse
  public var output: Output?
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, output: Output? = nil)
}
public typealias FinalizeStep<OperationStackOutput> = ClientRuntime.MiddlewareStep<SmithyHTTPAPI.SdkHttpRequestBuilder, ClientRuntime.OperationOutput<OperationStackOutput>>
public let FinalizeStepId: Swift.String
public struct FinalizeStepHandler<OperationStackOutput, H> : ClientRuntime.Handler where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput> {
  public typealias Input = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias Output = ClientRuntime.OperationOutput<OperationStackOutput>
  public init(handler: H)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: ClientRuntime.FinalizeStepHandler<OperationStackOutput, H>.Input) async throws -> ClientRuntime.FinalizeStepHandler<OperationStackOutput, H>.Output
  #endif
}
public typealias InitializeStep<OperationStackInput, OperationStackOutput> = ClientRuntime.MiddlewareStep<OperationStackInput, ClientRuntime.OperationOutput<OperationStackOutput>>
public let InitializeStepId: Swift.String
public struct InitializeStepHandler<OperationStackInput, OperationStackOutput, H> : ClientRuntime.Handler where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput> {
  public typealias Input = OperationStackInput
  public typealias Output = ClientRuntime.OperationOutput<OperationStackOutput>
  public init(handler: H)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: ClientRuntime.InitializeStepHandler<OperationStackInput, OperationStackOutput, H>.Input) async throws -> ClientRuntime.InitializeStepHandler<OperationStackInput, OperationStackOutput, H>.Output
  #endif
}
public typealias SerializeStep<OperationStackInput, OperationStackOutput> = ClientRuntime.MiddlewareStep<ClientRuntime.SerializeStepInput<OperationStackInput>, ClientRuntime.OperationOutput<OperationStackOutput>>
public let SerializeStepId: Swift.String
public struct SerializeStepHandler<OperationStackInput, OperationStackOutput, H> : ClientRuntime.Handler where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput> {
  public typealias Input = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias Output = ClientRuntime.OperationOutput<OperationStackOutput>
  public init(handler: H)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle(context: Smithy.Context, input: ClientRuntime.SerializeStepHandler<OperationStackInput, OperationStackOutput, H>.Input) async throws -> ClientRuntime.SerializeStepHandler<OperationStackInput, OperationStackOutput, H>.Output
  #endif
}
public struct SerializeStepInput<OperationStackInput> {
  public let operationInput: OperationStackInput
  public let builder: SmithyHTTPAPI.SdkHttpRequestBuilder
}
public protocol BaseError {
  var httpResponse: SmithyHTTPAPI.HttpResponse { get }
  var code: Swift.String { get }
  var message: Swift.String? { get }
  var requestID: Swift.String? { get }
  func customError() -> (any Swift.Error)?
}
extension ClientRuntime.BaseError {
  public func customError() -> (any Swift.Error)?
}
public enum BaseErrorDecodeError : Swift.Error {
  case missingRequiredData
  public static func == (a: ClientRuntime.BaseErrorDecodeError, b: ClientRuntime.BaseErrorDecodeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AwsCommonRuntimeKit.CRTError : Swift.Error {
}
@_hasMissingDesignatedInitializers public class CRTClientEngine : SmithyHTTPAPI.HTTPClient {
  public typealias StreamContinuation = _Concurrency.CheckedContinuation<SmithyHTTPAPI.HttpResponse, any Swift.Error>
  #if compiler(>=5.3) && $AsyncAwait
  public func send(request: SmithyHTTPAPI.SdkHttpRequest) async throws -> SmithyHTTPAPI.HttpResponse
  #endif
  @objc deinit
}
public struct CRTClientEngineLogHandlerFactory : ClientRuntime.SDKLogHandlerFactory {
  public var label: Swift.String
  public func construct(label: Swift.String) -> any Logging.LogHandler
  public init(logLevel: ClientRuntime.SDKLogLevel)
}
public struct CRTClientTLSOptions : ClientRuntime.TLSConfiguration {
  public var certificate: Swift.String?
  public var certificateDir: Swift.String?
  public var privateKey: Swift.String?
  public var pkcs12Path: Swift.String?
  public var pkcs12Password: Swift.String?
  public var useSelfSignedCertificate: Swift.Bool {
    get
  }
  public var useProvidedKeystore: Swift.Bool {
    get
  }
  public init(certificateDir: Swift.String? = nil, certificate: Swift.String? = nil, pkcs12Path: Swift.String? = nil, pkcs12Password: Swift.String? = nil, privateKey: Swift.String? = nil)
}
@_hasMissingDesignatedInitializers final public class SDKDefaultIO {
  final public let eventLoopGroup: AwsCommonRuntimeKit.EventLoopGroup
  final public let hostResolver: AwsCommonRuntimeKit.HostResolver
  final public let clientBootstrap: AwsCommonRuntimeKit.ClientBootstrap
  final public let tlsContext: AwsCommonRuntimeKit.TLSContext
  public static let shared: ClientRuntime.SDKDefaultIO
  final public func setLogLevel(level: AwsCommonRuntimeKit.LogLevel)
  @objc deinit
}
public protocol TLSConfiguration {
  var certificate: Swift.String? { get set }
  var certificateDir: Swift.String? { get set }
  var privateKey: Swift.String? { get set }
  var pkcs12Path: Swift.String? { get set }
  var pkcs12Password: Swift.String? { get set }
}
public protocol HTTPError {
  var httpResponse: SmithyHTTPAPI.HttpResponse { get }
}
extension SmithyHTTPAPI.HttpResponse : SmithyReadWrite.WireDataProviding {
  #if compiler(>=5.3) && $AsyncAwait
  public func data() async throws -> Foundation.Data
  #endif
}
public class HttpClientConfiguration {
  public var connectTimeout: Foundation.TimeInterval?
  public var socketTimeout: Foundation.TimeInterval
  public var defaultHeaders: SmithyHTTPAPI.Headers
  public var protocolType: Smithy.URIScheme?
  public var tlsConfiguration: (any ClientRuntime.TLSConfiguration)?
  public init(connectTimeout: Foundation.TimeInterval? = nil, socketTimeout: Foundation.TimeInterval = 60.0, protocolType: Smithy.URIScheme = .https, defaultHeaders: SmithyHTTPAPI.Headers = Headers(), tlsConfiguration: (any ClientRuntime.TLSConfiguration)? = nil)
  @objc deinit
}
public struct AuthSchemeMiddleware<OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init()
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
}
extension ClientRuntime.AuthSchemeMiddleware : ClientRuntime.SelectAuthScheme {
  #if compiler(>=5.3) && $AsyncAwait
  public func select(attributes: Smithy.Context) async throws -> SmithyHTTPAuthAPI.SelectedAuthScheme?
  #endif
  public typealias AttributesType = Smithy.Context
}
public struct ContentLengthMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(requiresLength: Swift.Bool? = nil, unsignedPayload: Swift.Bool? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.ContentLengthMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.ContentLengthMiddleware<OperationStackInput, OperationStackOutput>.MOutput where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.ContentLengthMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeTransmit(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct ContentMD5Middleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.ContentMD5Middleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.ContentMD5Middleware<OperationStackInput, OperationStackOutput>.MOutput where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.ContentMD5Middleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeTransmit(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct ContentTypeMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(contentType: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.ContentTypeMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeRetryLoop(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct DeserializeMiddleware<OperationStackOutput> : ClientRuntime.Middleware {
  public var id: Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  public init(_ wireResponseClosure: @escaping SmithyReadWrite.WireResponseOutputClosure<SmithyHTTPAPI.HttpResponse, OperationStackOutput>, _ wireResponseErrorClosure: @escaping SmithyReadWrite.WireResponseErrorClosure<SmithyHTTPAPI.HttpResponse>)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequest, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequest
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.DeserializeMiddleware : Smithy.ResponseMessageDeserializer {
  #if compiler(>=5.3) && $AsyncAwait
  public func deserialize(response: SmithyHTTPAPI.HttpResponse, attributes: Smithy.Context) async throws -> Swift.Result<OperationStackOutput, any Swift.Error>
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias OutputType = OperationStackOutput
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct HeaderMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(_ headerProvider: @escaping ClientRuntime.HeaderProvider<OperationStackInput>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.HeaderMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.HeaderMiddleware<OperationStackInput, OperationStackOutput>.MOutput where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.HeaderMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct LoggerMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(clientLogMode: ClientRuntime.ClientLogMode)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequest, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequest, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequest
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.LoggerMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func readBeforeTransmit(context: some AfterSerialization<InputType, RequestType, AttributesType>) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readAfterTransmit(context: some BeforeDeserialization<InputType, RequestType, ResponseType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct MutateHeadersMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(overrides: [Swift.String : Swift.String]? = nil, additional: [Swift.String : Swift.String]? = nil, conditionallySet: [Swift.String : Swift.String]? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.MutateHeadersMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeTransmit(context: some MutableRequest<InputType, RequestType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public typealias HeaderProvider<T> = (T) -> SmithyHTTPAPI.Headers
public typealias QueryItemProvider<T> = (T) throws -> [Smithy.URIQueryItem]
public typealias URLPathProvider<T> = (T) -> Swift.String?
public struct QueryItemMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(_ queryItemProvider: @escaping ClientRuntime.QueryItemProvider<OperationStackInput>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: ClientRuntime.QueryItemMiddleware<OperationStackInput, OperationStackOutput>.Context, input: ClientRuntime.QueryItemMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.QueryItemMiddleware<OperationStackInput, OperationStackOutput>.MOutput where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.QueryItemMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct BlobBodyMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(keyPath: Swift.KeyPath<OperationStackInput, Foundation.Data?>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.BlobBodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct BlobStreamBodyMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(keyPath: Swift.KeyPath<OperationStackInput, Smithy.ByteStream?>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: ClientRuntime.BlobStreamBodyMiddleware<OperationStackInput, OperationStackOutput>.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.BlobStreamBodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct BodyMiddleware<OperationStackInput, OperationStackOutput, Writer> : ClientRuntime.Middleware where Writer : SmithyReadWrite.SmithyWriter {
  public let id: Swift.String
  public init(rootNodeInfo: Writer.NodeInfo, inputWritingClosure: @escaping SmithyReadWrite.WritingClosure<OperationStackInput, Writer>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.BodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct EnumBodyMiddleware<OperationStackInput, OperationStackOutput, Primitive> : ClientRuntime.Middleware where Primitive : Swift.RawRepresentable, Primitive.RawValue == Swift.String {
  public let id: Swift.String
  public init(keyPath: Swift.KeyPath<OperationStackInput, Primitive?>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: ClientRuntime.EnumBodyMiddleware<OperationStackInput, OperationStackOutput, Primitive>.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.EnumBodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct EventStreamBodyMiddleware<OperationStackInput, OperationStackOutput, OperationStackInputPayload> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(keyPath: Swift.KeyPath<OperationStackInput, _Concurrency.AsyncThrowingStream<OperationStackInputPayload, any Swift.Error>?>, defaultBody: Swift.String? = nil, marshalClosure: @escaping SmithyEventStreamsAPI.MarshalClosure<OperationStackInputPayload>, initialRequestMessage: SmithyEventStreamsAPI.Message? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.EventStreamBodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias AttributesType = Smithy.Context
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct PayloadBodyMiddleware<OperationStackInput, OperationStackOutput, OperationStackInputPayload, Writer> : ClientRuntime.Middleware where Writer : SmithyReadWrite.SmithyWriter {
  public let id: Swift.String
  public init(rootNodeInfo: Writer.NodeInfo, inputWritingClosure: @escaping SmithyReadWrite.WritingClosure<OperationStackInputPayload, Writer>, keyPath: Swift.KeyPath<OperationStackInput, OperationStackInputPayload?>, defaultBody: Swift.String?)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: ClientRuntime.PayloadBodyMiddleware<OperationStackInput, OperationStackOutput, OperationStackInputPayload, Writer>.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.PayloadBodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct StringBodyMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(keyPath: Swift.KeyPath<OperationStackInput, Swift.String?>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: ClientRuntime.SerializeStepInput<OperationStackInput>, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == ClientRuntime.SerializeStepInput<OperationStackInput>, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = ClientRuntime.SerializeStepInput<OperationStackInput>
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
}
extension ClientRuntime.StringBodyMiddleware : Smithy.RequestMessageSerializer {
  public typealias InputType = OperationStackInput
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public func apply(input: OperationStackInput, builder: SmithyHTTPAPI.SdkHttpRequestBuilder, attributes: Smithy.Context) throws
}
public struct SignerMiddleware<OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init()
  public typealias MInput = SmithyHTTPAPI.SdkHttpRequestBuilder
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: Smithy.Context, input: SmithyHTTPAPI.SdkHttpRequestBuilder, next: H) async throws -> ClientRuntime.OperationOutput<OperationStackOutput> where H : ClientRuntime.Handler, H.Input == SmithyHTTPAPI.SdkHttpRequestBuilder, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
}
extension ClientRuntime.SignerMiddleware : ClientRuntime.ApplySigner {
  #if compiler(>=5.3) && $AsyncAwait
  public func apply(request: SmithyHTTPAPI.SdkHttpRequest, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Smithy.Context) async throws -> SmithyHTTPAPI.SdkHttpRequest
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
}
public struct URLHostMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(host: Swift.String? = nil, hostPrefix: Swift.String? = nil)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: ClientRuntime.URLHostMiddleware<OperationStackInput, OperationStackOutput>.Context, input: ClientRuntime.URLHostMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.URLHostMiddleware<OperationStackInput, OperationStackOutput>.MOutput where OperationStackInput == H.Input, H : ClientRuntime.Handler, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = OperationStackInput
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.URLHostMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeSerialization(context: some MutableInput<InputType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public struct URLPathMiddleware<OperationStackInput, OperationStackOutput> : ClientRuntime.Middleware {
  public let id: Swift.String
  public init(urlPrefix: Swift.String? = nil, _ urlPathProvider: @escaping ClientRuntime.URLPathProvider<OperationStackInput>)
  #if compiler(>=5.3) && $AsyncAwait
  public func handle<H>(context: ClientRuntime.URLPathMiddleware<OperationStackInput, OperationStackOutput>.Context, input: ClientRuntime.URLPathMiddleware<OperationStackInput, OperationStackOutput>.MInput, next: H) async throws -> ClientRuntime.URLPathMiddleware<OperationStackInput, OperationStackOutput>.MOutput where OperationStackInput == H.Input, H : ClientRuntime.Handler, H.Output == ClientRuntime.OperationOutput<OperationStackOutput>
  #endif
  public typealias MInput = OperationStackInput
  public typealias MOutput = ClientRuntime.OperationOutput<OperationStackOutput>
  public typealias Context = Smithy.Context
}
extension ClientRuntime.URLPathMiddleware : ClientRuntime.HttpInterceptor {
  public typealias InputType = OperationStackInput
  public typealias OutputType = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public func modifyBeforeSerialization(context: some MutableInput<InputType, AttributesType>) async throws
  #endif
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
}
public class SdkHttpClient : ClientRuntime.ExecuteRequest {
  public init(engine: any SmithyHTTPAPI.HTTPClient, config: ClientRuntime.HttpClientConfiguration)
  #if compiler(>=5.3) && $AsyncAwait
  public func execute(request: SmithyHTTPAPI.SdkHttpRequest, attributes: Smithy.Context) async throws -> SmithyHTTPAPI.HttpResponse
  #endif
  public func getHandler<OperationStackOutput>() -> ClientRuntime.AnyHandler<SmithyHTTPAPI.SdkHttpRequest, ClientRuntime.OperationOutput<OperationStackOutput>>
  public typealias AttributesType = Smithy.Context
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  public typealias ResponseType = SmithyHTTPAPI.HttpResponse
  @objc deinit
}
extension SmithyHTTPAPI.SdkHttpRequest {
  final public func toHttpRequest() throws -> AwsCommonRuntimeKit.HTTPRequest
  final public func toHttp2Request() throws -> AwsCommonRuntimeKit.HTTPRequestBase
}
extension SmithyHTTPAPI.SdkHttpRequestBuilder {
  public func update(from crtRequest: AwsCommonRuntimeKit.HTTPRequestBase, originalRequest: SmithyHTTPAPI.SdkHttpRequest) -> SmithyHTTPAPI.SdkHttpRequestBuilder
}
extension AwsCommonRuntimeKit.HTTPRequestBase {
  public var signature: Swift.String? {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public static func from(httpClientConfiguration: ClientRuntime.HttpClientConfiguration) -> Foundation.URLSessionConfiguration
}
@_hasMissingDesignatedInitializers final public class URLSessionHTTPClient : SmithyHTTPAPI.HTTPClient {
  convenience public init(httpClientConfiguration: ClientRuntime.HttpClientConfiguration)
  @objc deinit
  #if compiler(>=5.3) && $AsyncAwait
  final public func send(request: SmithyHTTPAPI.SdkHttpRequest) async throws -> SmithyHTTPAPI.HttpResponse
  #endif
}
public enum URLSessionHTTPClientError : Swift.Error {
  case incompleteHTTPRequest
  case responseNotHTTP
  case closedBeforeResponse
  case unresumedConnection
  case unclosedResponseStream
  public static func == (a: ClientRuntime.URLSessionHTTPClientError, b: ClientRuntime.URLSessionHTTPClientError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct URLSessionTLSOptions : ClientRuntime.TLSConfiguration {
  public var certificate: Swift.String?
  public var certificateDir: Swift.String?
  public var privateKey: Swift.String?
  public var pkcs12Path: Swift.String?
  public var pkcs12Password: Swift.String?
  public var useSelfSignedCertificate: Swift.Bool {
    get
  }
  public var useProvidedKeystore: Swift.Bool {
    get
  }
  public init(certificate: Swift.String? = nil, pkcs12Path: Swift.String? = nil, pkcs12Password: Swift.String? = nil)
}
public struct UnknownHTTPServiceError : ClientRuntime.ServiceError, ClientRuntime.HTTPError, Swift.Error {
  public var typeName: Swift.String?
  public var message: Swift.String?
  public var httpResponse: SmithyHTTPAPI.HttpResponse
}
extension ClientRuntime.UnknownHTTPServiceError {
  public init(httpResponse: SmithyHTTPAPI.HttpResponse, message: Swift.String? = nil, typeName: Swift.String? = nil)
}
extension ClientRuntime.UnknownHTTPServiceError {
  public static func makeError<Base>(baseError: Base) throws -> any Swift.Error where Base : ClientRuntime.BaseError
}
public enum ErrorFault {
  case client
  case server
  public static func == (a: ClientRuntime.ErrorFault, b: ClientRuntime.ErrorFault) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ModeledError {
  static var typeName: Swift.String { get }
  static var fault: ClientRuntime.ErrorFault { get }
  static var isRetryable: Swift.Bool { get }
  static var isThrottling: Swift.Bool { get }
}
extension ClientRuntime.ModeledError {
  public var typeName: Swift.String? {
    get
  }
}
public protocol ServiceError {
  var typeName: Swift.String? { get }
  var message: Swift.String? { get }
}
extension Smithy.ByteStream {
  public static func from(fileHandle: Foundation.FileHandle) -> Smithy.ByteStream
}
extension Smithy.ByteStream {
  public static func getChecksumValidatingBody(stream: any Smithy.Stream, expectedChecksum: Swift.String, checksumAlgorithm: SmithyChecksumsAPI.ChecksumAlgorithm) -> Smithy.ByteStream
}
public struct UnknownServiceError : ClientRuntime.ServiceError, Swift.Error {
  public var typeName: Swift.String?
  public var message: Swift.String?
  public init(typeName: Swift.String?, message: Swift.String?)
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol ApplyEndpoint<RequestType, AttributesType> {
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func apply(request: Self.RequestType, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Self.AttributesType) async throws -> Self.RequestType
  #endif
}
#else
public protocol ApplyEndpoint {
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func apply(request: Self.RequestType, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Self.AttributesType) async throws -> Self.RequestType
  #endif
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol ApplySigner<RequestType, AttributesType> {
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func apply(request: Self.RequestType, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Self.AttributesType) async throws -> Self.RequestType
  #endif
}
#else
public protocol ApplySigner {
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func apply(request: Self.RequestType, selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme?, attributes: Self.AttributesType) async throws -> Self.RequestType
  #endif
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SelectAuthScheme<AttributesType> {
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func select(attributes: Self.AttributesType) async throws -> SmithyHTTPAuthAPI.SelectedAuthScheme?
  #endif
}
#else
public protocol SelectAuthScheme {
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func select(attributes: Self.AttributesType) async throws -> SmithyHTTPAuthAPI.SelectedAuthScheme?
  #endif
}
#endif
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol ExecuteRequest<RequestType, ResponseType, AttributesType> {
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype ResponseType : Smithy.ResponseMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func execute(request: Self.RequestType, attributes: Self.AttributesType) async throws -> Self.ResponseType
  #endif
}
#else
public protocol ExecuteRequest {
  associatedtype RequestType : Smithy.RequestMessage
  associatedtype ResponseType : Smithy.ResponseMessage
  associatedtype AttributesType : Smithy.HasAttributes
  #if compiler(>=5.3) && $AsyncAwait
  func execute(request: Self.RequestType, attributes: Self.AttributesType) async throws -> Self.ResponseType
  #endif
}
#endif
public struct Orchestrator<InputType, OutputType, RequestType, ResponseType> where RequestType : Smithy.RequestMessage, ResponseType : Smithy.ResponseMessage {
  #if compiler(>=5.3) && $AsyncAwait
  public func presignRequest(input: InputType) async throws -> RequestType
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func execute(input: InputType) async throws -> OutputType
  #endif
}
public class OrchestratorBuilder<InputType, OutputType, RequestType, ResponseType> where RequestType : Smithy.RequestMessage, ResponseType : Smithy.ResponseMessage {
  public var interceptors: ClientRuntime.Interceptors<InputType, OutputType, RequestType, ResponseType, Smithy.Context>
  public init()
  @discardableResult
  public func attributes(_ attributes: Smithy.Context) -> Self
  @discardableResult
  public func serialize(_ serializer: @escaping (InputType, RequestType.RequestBuilderType, Smithy.Context) throws -> Swift.Void) -> Self
  @discardableResult
  public func serialize(_ serializer: some RequestMessageSerializer<InputType, RequestType>) -> Self
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func deserialize(_ deserializer: @escaping (ResponseType, Smithy.Context) async throws -> Swift.Result<OutputType, any Swift.Error>) -> Self
  #endif
  @discardableResult
  public func deserialize(_ deserializer: some ResponseMessageDeserializer<OutputType, ResponseType, Context>) -> Self
  @discardableResult
  public func retryStrategy(_ retryStrategy: any SmithyRetriesAPI.RetryStrategy) -> Self
  @discardableResult
  public func retryErrorInfoProvider(_ retryErrorInfoProvider: @escaping (any Swift.Error) -> SmithyRetriesAPI.RetryErrorInfo?) -> Self
  @discardableResult
  public func selectAuthScheme(_ selectAuthScheme: some SelectAuthScheme<Context>) -> Self
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func selectAuthScheme(_ selectAuthScheme: @escaping (Smithy.Context) async throws -> SmithyHTTPAuthAPI.SelectedAuthScheme?) -> Self
  #endif
  @discardableResult
  public func applyEndpoint(_ applyEndpoint: some ApplyEndpoint<RequestType, Context>) -> Self
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func applyEndpoint(_ applyEndpoint: @escaping (RequestType, SmithyHTTPAuthAPI.SelectedAuthScheme?, Smithy.Context) async throws -> RequestType) -> Self
  #endif
  @discardableResult
  public func applySigner(_ applySigner: some ApplySigner<RequestType, Context>) -> Self
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func applySigner(_ applySigner: @escaping (RequestType, SmithyHTTPAuthAPI.SelectedAuthScheme?, Smithy.Context) async throws -> RequestType) -> Self
  #endif
  @discardableResult
  public func executeRequest(_ executeRequest: some ExecuteRequest<RequestType, ResponseType, Context>) -> Self
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func executeRequest(_ executeRequest: @escaping (RequestType, Smithy.Context) async throws -> ResponseType) -> Self
  #endif
  public func build() -> ClientRuntime.Orchestrator<InputType, OutputType, RequestType, ResponseType>
  @objc deinit
}
public protocol PaginateToken {
  associatedtype Token
  func usingPaginationToken(_ token: Self.Token) -> Self
}
#if compiler(>=5.3) && $RethrowsProtocol
public struct PaginatorSequence<OperationStackInput, OperationStackOutput> : _Concurrency.AsyncSequence where OperationStackInput : ClientRuntime.PaginateToken, OperationStackInput.Token : Swift.Equatable {
  public typealias Element = OperationStackOutput
  #if compiler(>=5.3) && $AsyncAwait
  public init(input: OperationStackInput, inputKey: Swift.KeyPath<OperationStackInput, OperationStackInput.Token?>? = nil, outputKey: Swift.KeyPath<OperationStackOutput, OperationStackInput.Token?>, isTruncatedKey: Swift.KeyPath<OperationStackOutput, Swift.Bool?>? = nil, paginationFunction: @escaping (OperationStackInput) async throws -> OperationStackOutput)
  #endif
  public struct PaginationIterator : _Concurrency.AsyncIteratorProtocol {
    #if compiler(>=5.3) && $AsyncAwait
    public mutating func next() async throws -> OperationStackOutput?
    #endif
    public typealias Element = OperationStackOutput
  }
  public func makeAsyncIterator() -> ClientRuntime.PaginatorSequence<OperationStackInput, OperationStackOutput>.PaginationIterator
  public typealias AsyncIterator = ClientRuntime.PaginatorSequence<OperationStackInput, OperationStackOutput>.PaginationIterator
}
#endif
public class AuthSchemePlugin : ClientRuntime.Plugin {
  public init(authSchemeResolver: (any SmithyHTTPAuthAPI.AuthSchemeResolver)? = nil, authSchemes: [any SmithyHTTPAuthAPI.AuthScheme]? = nil)
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration)
  @objc deinit
}
public class DefaultClientPlugin : ClientRuntime.Plugin {
  public init()
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration)
  @objc deinit
}
public class DefaultHttpClientPlugin : ClientRuntime.Plugin {
  public init(httpClient: any SmithyHTTPAPI.HTTPClient, httpClientConfiguration: ClientRuntime.HttpClientConfiguration)
  convenience public init(httpClientConfiguration: ClientRuntime.HttpClientConfiguration)
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration)
  @objc deinit
}
public protocol Plugin {
  #if compiler(>=5.3) && $AsyncAwait
  func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration) async throws
  #endif
}
public class RetryPlugin : ClientRuntime.Plugin {
  public init(retryStrategyOptions: SmithyRetriesAPI.RetryStrategyOptions)
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration)
  @objc deinit
}
public class TelemetryPlugin : ClientRuntime.Plugin {
  public init(telemetryProvider: any ClientRuntime.TelemetryProvider)
  public init(contextManager: (any ClientRuntime.TelemetryContextManager)? = DefaultTelemetry.defaultContextManager, loggerProvider: (any ClientRuntime.LoggerProvider)? = DefaultTelemetry.defaultLoggerProvider, meterProvider: (any ClientRuntime.MeterProvider)? = DefaultTelemetry.defaultMeterProvider, tracerProvider: (any ClientRuntime.TracerProvider)? = DefaultTelemetry.defaultTracerProvider)
  public func configureClient(clientConfiguration: any ClientRuntime.ClientConfiguration)
  @objc deinit
}
#if compiler(>=5.3) && $RethrowsProtocol
extension _Concurrency.AsyncSequence {
  #if compiler(>=5.3) && $AsyncAwait
  public func asyncCompactMap<T>(_ transform: (Self.Element) -> [T]?) async rethrows -> [T]
  #endif
}
#endif
public typealias Date = Foundation.Date
extension Foundation.Date {
  public func withoutFractionalSeconds() -> ClientRuntime.Date
}
@propertyWrapper public class Indirect<T> {
  public var wrappedValue: Swift.Optional<T>
  public init(wrappedValue: Swift.Optional<T>)
  @objc deinit
}
extension ClientRuntime.Indirect : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: ClientRuntime.Indirect<T>, rhs: ClientRuntime.Indirect<T>) -> Swift.Bool
}
extension Swift.Float {
  public func encoded() -> Swift.String
}
extension Swift.Double {
  public func encoded() -> Swift.String
}
extension Swift.StringProtocol {
  public func base64EncodedString() throws -> Swift.String
}
extension Swift.StringProtocol {
  public func trim() -> Swift.String
}
extension Swift.StringProtocol {
  public func removePrefix(_ prefix: Swift.String) -> Swift.String
}
extension Swift.StringProtocol {
  public func base64DecodedString() throws -> Swift.String
}
extension Swift.String {
  public func substringAfter(_ separator: Swift.String) -> Swift.String
  public func substringBefore(_ separator: Swift.String) -> Swift.String
}
extension Swift.String {
  public func urlPercentEncoding(encodeForwardSlash: Swift.Bool = true) -> Swift.String
}
extension Swift.String {
  public func stripFirstMatching(prefixes: [Swift.String]) -> Swift.String
}
extension Swift.String {
  public func appendingPathComponent(_ pathComponent: Swift.String) -> Swift.String
}
public enum DefaultRetryErrorInfoProvider : SmithyRetriesAPI.RetryErrorInfoProvider {
  public static func errorInfo(for error: any Swift.Error) -> SmithyRetriesAPI.RetryErrorInfo?
}
extension Foundation.CharacterSet {
  public static var singleUrlQueryAllowed: Foundation.CharacterSet {
    get
  }
}
extension Swift.Double {
  public var clean: Swift.String {
    get
  }
}
public func quoteHeaderValue(_ value: Swift.String) -> Swift.String
public func splitHeaderListValues(_ value: Swift.String?) throws -> [Swift.String]?
public func splitHttpDateHeaderListValues(_ value: Swift.String?) throws -> [Swift.String]?
public enum HeaderDeserializationError : Swift.Error {
  case invalidTimestampHeaderList(value: Swift.String)
  case invalidTimestampHeader(value: Swift.String)
  case invalidBooleanHeaderList(value: Swift.String)
  case invalidNumbersHeaderList(value: Swift.String)
  case invalidStringHeaderList(value: Swift.String)
}
extension ClientRuntime.HeaderDeserializationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias TimestampFormatter = SmithyTimestamps.TimestampFormatter
public typealias TimestampFormat = SmithyTimestamps.TimestampFormat
extension SmithyReadWrite.SmithyWriter {
  public func write(_ value: Smithy.ByteStream?) throws
}
public protocol TelemetryContext {
  func makeCurrent() -> any ClientRuntime.TelemetryScope
}
public protocol TelemetryContextManager {
  func current() -> any ClientRuntime.TelemetryContext
}
public protocol TelemetryScope {
  func end()
}
public enum DefaultTelemetry {
  public static let provider: any ClientRuntime.TelemetryProvider
}
extension ClientRuntime.DefaultTelemetry {
  public static let defaultContextManager: any ClientRuntime.TelemetryContextManager
}
extension ClientRuntime.DefaultTelemetry {
  public static let defaultLoggerProvider: any ClientRuntime.LoggerProvider
}
extension ClientRuntime.DefaultTelemetry {
  public static let defaultMeterProvider: any ClientRuntime.MeterProvider
}
extension ClientRuntime.DefaultTelemetry {
  public static let defaultTracerProvider: any ClientRuntime.TracerProvider
}
public enum ClientLogMode {
  case request
  case requestWithBody
  case response
  case responseWithBody
  case requestAndResponse
  case requestAndResponseWithBody
  public static func == (a: ClientRuntime.ClientLogMode, b: ClientRuntime.ClientLogMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension AwsCommonRuntimeKit.LogLevel {
  public var stringValue: Swift.String {
    get
  }
}
public protocol LoggerProvider {
  func getLogger(name: Swift.String) -> any Smithy.LogAgent
}
public protocol SDKLogHandlerFactory {
  var label: Swift.String { get }
  func construct(label: Swift.String) -> any Logging.LogHandler
}
public enum SDKLogLevel : Swift.String, Swift.Codable, Swift.CaseIterable {
  case trace
  case debug
  case info
  case notice
  case warning
  case error
  case critical
  public func toLoggerType() -> Logging.Logger.Level
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ClientRuntime.SDKLogLevel]
  public typealias RawValue = Swift.String
  public static var allCases: [ClientRuntime.SDKLogLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
#if compiler(>=5.3) && $Actors
@_hasMissingDesignatedInitializers public actor SDKLoggingSystem {
  public static func add(logHandlerFactory: any ClientRuntime.SDKLogHandlerFactory)
  #if compiler(>=5.3) && $AsyncAwait
  public static func initialize(defaultLogLevel: ClientRuntime.SDKLogLevel = .info) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func initialize(logLevel: ClientRuntime.SDKLogLevel) async
  #endif
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
#endif
public protocol AsyncMeasurementHandle {
  func stop()
}
public typealias LongAsyncMeasurement = ClientRuntime.AsyncMeasurement<Swift.Int64>
public typealias DoubleAsyncMeasurement = ClientRuntime.AsyncMeasurement<Swift.Double>
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol AsyncMeasurement<NumericType> {
  associatedtype NumericType : Swift.Numeric
  func record(value: Self.NumericType, attributes: Smithy.Attributes?, context: (any ClientRuntime.TelemetryContext)?)
}
#else
public protocol AsyncMeasurement {
  associatedtype NumericType : Swift.Numeric
  func record(value: Self.NumericType, attributes: Smithy.Attributes?, context: (any ClientRuntime.TelemetryContext)?)
}
#endif
public protocol Histogram {
  func record(value: Swift.Double, attributes: Smithy.Attributes?, context: (any ClientRuntime.TelemetryContext)?)
}
public protocol Meter {
  func createGauge(name: Swift.String, callback: @escaping (any ClientRuntime.AsyncMeasurement<Swift.Double>) -> Swift.Void, units: Swift.String?, description: Swift.String?) -> any ClientRuntime.AsyncMeasurementHandle
  func createUpDownCounter(name: Swift.String, units: Swift.String?, description: Swift.String?) -> any ClientRuntime.UpDownCounter
  func createAsyncUpDownCounter(name: Swift.String, callback: @escaping (any ClientRuntime.AsyncMeasurement<Swift.Int64>) -> Swift.Void, units: Swift.String?, description: Swift.String?) -> any ClientRuntime.AsyncMeasurementHandle
  func createCounter(name: Swift.String, units: Swift.String?, description: Swift.String?) -> any ClientRuntime.MonotonicCounter
  func createAsyncMonotonicCounter(name: Swift.String, callback: @escaping (any ClientRuntime.AsyncMeasurement<Swift.Int64>) -> Swift.Void, units: Swift.String?, description: Swift.String?) -> any ClientRuntime.AsyncMeasurementHandle
  func createHistogram(name: Swift.String, units: Swift.String?, description: Swift.String?) -> any ClientRuntime.Histogram
}
public protocol MeterProvider {
  func getMeter(scope: Swift.String, attributes: Smithy.Attributes?) -> any ClientRuntime.Meter
}
public protocol MonotonicCounter {
  func add(value: Swift.Int64, attributes: Smithy.Attributes?, context: (any ClientRuntime.TelemetryContext)?)
}
public protocol UpDownCounter {
  func add(value: Swift.Int64, attributes: Smithy.Attributes?, context: (any ClientRuntime.TelemetryContext)?)
}
public protocol TelemetryProvider {
  var contextManager: any ClientRuntime.TelemetryContextManager { get }
  var loggerProvider: any ClientRuntime.LoggerProvider { get }
  var meterProvider: any ClientRuntime.MeterProvider { get }
  var tracerProvider: any ClientRuntime.TracerProvider { get }
}
public protocol SpanContext {
  var traceId: Swift.String { get }
  var spanId: Swift.String { get }
  var isRemote: Swift.Bool { get }
  var isValid: Swift.Bool { get }
}
public enum SpanKind {
  case `internal`
  case client
  case server
  case producer
  case consumer
  public static func == (a: ClientRuntime.SpanKind, b: ClientRuntime.SpanKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TraceSpan : ClientRuntime.TelemetryScope {
  var name: Swift.String { get }
  func emitEvent(name: Swift.String, attributes: Smithy.Attributes?)
  func setAttribute<T>(key: Smithy.AttributeKey<T>, value: T)
  func setStatus(status: ClientRuntime.TraceSpanStatus)
}
public enum TraceSpanStatus {
  case unset
  case ok
  case error
  public static func == (a: ClientRuntime.TraceSpanStatus, b: ClientRuntime.TraceSpanStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Tracer {
  func createSpan(name: Swift.String, initialAttributes: Smithy.Attributes?, spanKind: ClientRuntime.SpanKind, parentContext: (any ClientRuntime.TelemetryContext)?) -> any ClientRuntime.TraceSpan
}
public protocol TracerProvider {
  func getTracer(scope: Swift.String, attributes: Smithy.Attributes?) -> any ClientRuntime.Tracer
}
public enum PlatformOperatingSystem : Swift.String {
  case windows
  case linux
  case iOS
  case macOS
  case watchOS
  case tvOS
  case visionOS
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public var currentOS: ClientRuntime.PlatformOperatingSystem {
  get
}
public struct PlatformOperationSystemVersion {
  public static func operatingSystemVersion() -> Swift.String?
}
public var swiftVersion: Swift.String {
  get
}
extension ClientRuntime.CRTResolvedEndpointType : Swift.Equatable {}
extension ClientRuntime.CRTResolvedEndpointType : Swift.Hashable {}
extension ClientRuntime.Position : Swift.Equatable {}
extension ClientRuntime.Position : Swift.Hashable {}
extension ClientRuntime.Position : Swift.RawRepresentable {}
extension ClientRuntime.BaseErrorDecodeError : Swift.Equatable {}
extension ClientRuntime.BaseErrorDecodeError : Swift.Hashable {}
extension ClientRuntime.URLSessionHTTPClientError : Swift.Equatable {}
extension ClientRuntime.URLSessionHTTPClientError : Swift.Hashable {}
extension ClientRuntime.ErrorFault : Swift.Equatable {}
extension ClientRuntime.ErrorFault : Swift.Hashable {}
extension ClientRuntime.ClientLogMode : Swift.Equatable {}
extension ClientRuntime.ClientLogMode : Swift.Hashable {}
extension ClientRuntime.SDKLogLevel : Swift.Equatable {}
extension ClientRuntime.SDKLogLevel : Swift.Hashable {}
extension ClientRuntime.SDKLogLevel : Swift.RawRepresentable {}
extension ClientRuntime.SpanKind : Swift.Equatable {}
extension ClientRuntime.SpanKind : Swift.Hashable {}
extension ClientRuntime.TraceSpanStatus : Swift.Equatable {}
extension ClientRuntime.TraceSpanStatus : Swift.Hashable {}
extension ClientRuntime.PlatformOperatingSystem : Swift.Equatable {}
extension ClientRuntime.PlatformOperatingSystem : Swift.Hashable {}
extension ClientRuntime.PlatformOperatingSystem : Swift.RawRepresentable {}
