// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyEventStreamsAuthAPI
import Foundation/*.Data*/
import Smithy
import Smithy/*.AttributeKey*/
import Smithy/*.Attributes*/
import Smithy/*.Context*/
import SmithyEventStreamsAPI
import SmithyEventStreamsAPI/*.Message*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Smithy.Context {
  public var messageSigner: (any SmithyEventStreamsAuthAPI.MessageSigner)? {
    get
    set
  }
}
public protocol MessageDataSigner {
  #if compiler(>=5.3) && $AsyncAwait
  func signEvent(payload: Foundation.Data, previousSignature: Swift.String, signingProperties: Smithy.Attributes) async throws -> SmithyEventStreamsAuthAPI.SigningResult<SmithyEventStreamsAPI.Message>
  #endif
}
public struct SigningResult<T> {
  public let output: T
  public let signature: Swift.String
  public init(output: T, signature: Swift.String)
}
#if compiler(>=5.3) && $RethrowsProtocol
public protocol MessageDecoderStream : _Concurrency.AsyncSequence {
  associatedtype Event where Self.Element == Self.Event
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
extension SmithyEventStreamsAuthAPI.MessageDecoderStream {
  public func toAsyncStream() -> _Concurrency.AsyncThrowingStream<Self.Event, any Swift.Error>
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
public protocol MessageEncoderStream : Smithy.Stream, _Concurrency.AsyncSequence where Self.Element == Foundation.Data {
  associatedtype Event
  init(stream: _Concurrency.AsyncThrowingStream<Self.Event, any Swift.Error>, messageEncoder: any SmithyEventStreamsAPI.MessageEncoder, marshalClosure: @escaping SmithyEventStreamsAPI.MarshalClosure<Self.Event>, messageSigner: any SmithyEventStreamsAuthAPI.MessageSigner, initialRequestMessage: SmithyEventStreamsAPI.Message?)
}
#endif
public protocol MessageSigner {
  #if compiler(>=5.3) && $AsyncAwait
  mutating func sign(message: SmithyEventStreamsAPI.Message) async throws -> SmithyEventStreamsAPI.Message
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func signEmpty() async throws -> SmithyEventStreamsAPI.Message
  #endif
}
