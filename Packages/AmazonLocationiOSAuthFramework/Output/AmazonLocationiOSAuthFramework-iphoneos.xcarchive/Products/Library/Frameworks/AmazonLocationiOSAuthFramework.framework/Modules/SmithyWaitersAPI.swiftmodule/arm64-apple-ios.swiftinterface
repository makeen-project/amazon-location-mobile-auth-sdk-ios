// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyWaitersAPI
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SmithyWaitersAPI.WaiterConfiguration {
  public struct Acceptor {
    public typealias Matcher = (Input, Swift.Result<Output, any Swift.Error>) -> Swift.Bool
    public enum State {
      case success
      case retry
      case failure
      public static func == (a: SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor.State, b: SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor.State) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct InputOutput {
      public let input: Input?
      public let output: Output?
      public init(input: Input, output: Output)
    }
    public let state: SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor.State
    public let matcher: SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor.Matcher
    public init(state: SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor.State, matcher: @escaping SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor.Matcher)
    public enum Match {
      case success(Swift.Result<Output, any Swift.Error>)
      case retry
      case failure(Swift.Result<Output, any Swift.Error>)
    }
  }
}
public enum JMESUtils {
  public static func compare(_ lhs: Swift.Bool?, _ comparator: (Swift.Bool?, Swift.Bool?) -> Swift.Bool, _ rhs: Swift.Bool?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Double?, _ comparator: (Swift.Double?, Swift.Double?) -> Swift.Bool, _ rhs: Swift.Double?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Double?, _ comparator: (Swift.Double, Swift.Double) -> Swift.Bool, _ rhs: Swift.Double?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Int?, _ comparator: (Swift.Double?, Swift.Double?) -> Swift.Bool, _ rhs: Swift.Int?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Int?, _ comparator: (Swift.Double, Swift.Double) -> Swift.Bool, _ rhs: Swift.Int?) -> Swift.Bool
  public static func compare(_ lhs: Swift.String?, _ comparator: (Swift.String?, Swift.String?) -> Swift.Bool, _ rhs: Swift.String?) -> Swift.Bool
  public static func compare<L, R>(_ lhs: L?, _ comparator: (Swift.String?, Swift.String?) -> Swift.Bool, _ rhs: R?) -> Swift.Bool where L : Swift.RawRepresentable, R : Swift.RawRepresentable, L.RawValue == Swift.String, R.RawValue == Swift.String
  public static func compare(_ lhs: Swift.Int?, _ comparator: (Swift.Double?, Swift.Double?) -> Swift.Bool, _ rhs: Swift.Double?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Double?, _ comparator: (Swift.Double?, Swift.Double?) -> Swift.Bool, _ rhs: Swift.Int?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Int?, _ comparator: (Swift.Double, Swift.Double) -> Swift.Bool, _ rhs: Swift.Double?) -> Swift.Bool
  public static func compare(_ lhs: Swift.Double?, _ comparator: (Swift.Double, Swift.Double) -> Swift.Bool, _ rhs: Swift.Int?) -> Swift.Bool
  public static func compare<T>(_ lhs: T?, _ comparator: (Swift.String?, Swift.String?) -> Swift.Bool, _ rhs: Swift.String?) -> Swift.Bool where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public static func compare<T>(_ lhs: Swift.String?, _ comparator: (Swift.String?, Swift.String?) -> Swift.Bool, _ rhs: T?) -> Swift.Bool where T : Swift.RawRepresentable, T.RawValue == Swift.String
}
@_hasMissingDesignatedInitializers public class Waiter<Input, Output> {
  final public let config: SmithyWaitersAPI.WaiterConfiguration<Input, Output>
  final public let operation: (Input) async throws -> Output
  #if compiler(>=5.3) && $AsyncAwait
  convenience public init(config: SmithyWaitersAPI.WaiterConfiguration<Input, Output>, operation: @escaping (Input) async throws -> Output)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func waitUntil(options: SmithyWaitersAPI.WaiterOptions, input: Input) async throws -> SmithyWaitersAPI.WaiterOutcome<Output>
  #endif
  @objc deinit
}
public struct WaiterConfiguration<Input, Output> {
  public let minDelay: Foundation.TimeInterval
  public let maxDelay: Foundation.TimeInterval
  public let acceptors: [SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor]
  public init(acceptors: [SmithyWaitersAPI.WaiterConfiguration<Input, Output>.Acceptor], minDelay: Foundation.TimeInterval = 2.0, maxDelay: Foundation.TimeInterval = 120.0) throws
}
public struct WaiterConfigurationError : Swift.Error {
}
public struct WaiterFailureError<Output> : Swift.Error {
  public let attempts: Swift.Int
  public let failedOnMatch: Swift.Bool
  public let result: Swift.Result<Output, any Swift.Error>
}
public struct WaiterTimeoutError : Swift.Error {
  public let attempts: Swift.Int
}
public struct WaiterOptions {
  public init(maxWaitTime: Foundation.TimeInterval, minDelay: Foundation.TimeInterval? = nil, maxDelay: Foundation.TimeInterval? = nil)
}
public struct WaiterOutcome<Output> {
  public let attempts: Swift.Int
  public let result: Swift.Result<Output, any Swift.Error>
  public init(attempts: Swift.Int, result: Swift.Result<Output, any Swift.Error>)
}
extension SmithyWaitersAPI.WaiterConfiguration.Acceptor.State : Swift.Equatable {}
extension SmithyWaitersAPI.WaiterConfiguration.Acceptor.State : Swift.Hashable {}
