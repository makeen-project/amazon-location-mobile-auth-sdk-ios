// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyHTTPAuthAPI
import Foundation/*.TimeInterval*/
import Smithy/*.AttributeKey*/
import Smithy/*.Attributes*/
import Smithy/*.Context*/
import Smithy/*.ContextBuilder*/
import SmithyHTTPAPI/*.SdkHttpRequestBuilder*/
import SmithyIdentityAPI/*.Identity*/
import SmithyIdentityAPI/*.IdentityResolver*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct AuthOption {
  public let schemeID: Swift.String
  public var identityProperties: Smithy.Attributes
  public var signingProperties: Smithy.Attributes
  public init(schemeID: Swift.String, identityProperties: Smithy.Attributes = Attributes(), signingProperties: Smithy.Attributes = Attributes())
}
public typealias AuthOptions = [SmithyHTTPAuthAPI.AuthOption]
public protocol AuthScheme {
  var schemeID: Swift.String { get }
  var signer: any SmithyHTTPAuthAPI.Signer { get }
  func customizeSigningProperties(signingProperties: Smithy.Attributes, context: Smithy.Context) throws -> Smithy.Attributes
}
extension SmithyHTTPAuthAPI.AuthScheme {
  public func identityResolver(config: any SmithyHTTPAuthAPI.IdentityResolverConfiguration) throws -> (any SmithyIdentityAPI.IdentityResolver)?
}
public typealias AuthSchemes = [any SmithyHTTPAuthAPI.AuthScheme]
public protocol AuthSchemeResolver {
  func resolveAuthScheme(params: any SmithyHTTPAuthAPI.AuthSchemeResolverParameters) throws -> [SmithyHTTPAuthAPI.AuthOption]
  func constructParameters(context: Smithy.Context) throws -> any SmithyHTTPAuthAPI.AuthSchemeResolverParameters
}
public protocol AuthSchemeResolverParameters {
  var operation: Swift.String { get }
}
extension Smithy.Context {
  public var isChunkedEligibleStream: Swift.Bool? {
    get
    set
  }
}
extension Smithy.Context {
  public var estimatedSkew: Foundation.TimeInterval? {
    get
    set
  }
  public var socketTimeout: Foundation.TimeInterval? {
    get
    set
  }
}
extension Smithy.ContextBuilder {
  @discardableResult
  public func withSocketTimeout(value newValue: Foundation.TimeInterval) -> Self
}
extension Smithy.Context {
  public func getAuthSchemes() -> Smithy.Attributes?
  public var selectedAuthScheme: SmithyHTTPAuthAPI.SelectedAuthScheme? {
    get
    set
  }
  public func setSelectedAuthScheme(_ value: SmithyHTTPAuthAPI.SelectedAuthScheme?)
  public func getAuthSchemeResolver() -> (any SmithyHTTPAuthAPI.AuthSchemeResolver)?
  public var signingAlgorithm: SmithyHTTPAuthAPI.SigningAlgorithm? {
    get
    set
  }
}
extension Smithy.ContextBuilder {
  @discardableResult
  public func withAuthSchemeResolver(value: (any SmithyHTTPAuthAPI.AuthSchemeResolver)?) -> Smithy.ContextBuilder
  @discardableResult
  public func withAuthScheme(value: any SmithyHTTPAuthAPI.AuthScheme) -> Smithy.ContextBuilder
  @discardableResult
  public func withAuthSchemes(value: [any SmithyHTTPAuthAPI.AuthScheme]) -> Smithy.ContextBuilder
  @discardableResult
  public func withSelectedAuthScheme(value: SmithyHTTPAuthAPI.SelectedAuthScheme) -> Smithy.ContextBuilder
  @discardableResult
  public func withSigningAlgorithm(value: SmithyHTTPAuthAPI.SigningAlgorithm) -> Self
}
extension Smithy.Context {
  public var requestSignature: Swift.String {
    get
    set
  }
}
extension Smithy.ContextBuilder {
  @discardableResult
  public func withRequestSignature(value: Swift.String) -> Self
}
public enum SigningPropertyKeys {
  public static let signingName: Smithy.AttributeKey<Swift.String>
  public static let signingRegion: Smithy.AttributeKey<Swift.String>
  public static let bidirectionalStreaming: Smithy.AttributeKey<Swift.Bool>
  public static let checksum: Smithy.AttributeKey<Swift.String>
  public static let expiration: Smithy.AttributeKey<Foundation.TimeInterval>
  public static let isChunkedEligibleStream: Smithy.AttributeKey<Swift.Bool>
  public static let omitSessionToken: Smithy.AttributeKey<Swift.Bool>
  public static let shouldNormalizeURIPath: Smithy.AttributeKey<Swift.Bool>
  public static let signatureType: Smithy.AttributeKey<SmithyHTTPAuthAPI.AWSSignatureType>
  public static let signedBodyHeader: Smithy.AttributeKey<SmithyHTTPAuthAPI.AWSSignedBodyHeader>
  public static let signingAlgorithm: Smithy.AttributeKey<SmithyHTTPAuthAPI.SigningAlgorithm>
  public static let unsignedBody: Smithy.AttributeKey<Swift.Bool>
  public static let useDoubleURIEncode: Smithy.AttributeKey<Swift.Bool>
}
public protocol IdentityResolverConfiguration {
  func getIdentityResolver(schemeID: Swift.String) throws -> (any SmithyIdentityAPI.IdentityResolver)?
}
public struct SelectedAuthScheme {
  public let schemeID: Swift.String
  public let identity: (any SmithyIdentityAPI.Identity)?
  public let signingProperties: Smithy.Attributes?
  public let signer: (any SmithyHTTPAuthAPI.Signer)?
  public init(schemeID: Swift.String, identity: (any SmithyIdentityAPI.Identity)?, signingProperties: Smithy.Attributes?, signer: (any SmithyHTTPAuthAPI.Signer)?)
}
extension SmithyHTTPAuthAPI.SelectedAuthScheme {
  public func getCopyWithUpdatedSigningProperty<T>(key: Smithy.AttributeKey<T>, value: T) -> SmithyHTTPAuthAPI.SelectedAuthScheme
}
public protocol Signer {
  #if compiler(>=5.3) && $AsyncAwait
  func signRequest<IdentityT>(requestBuilder: SmithyHTTPAPI.SdkHttpRequestBuilder, identity: IdentityT, signingProperties: Smithy.Attributes) async throws -> SmithyHTTPAPI.SdkHttpRequestBuilder where IdentityT : SmithyIdentityAPI.Identity
  #endif
}
public enum AWSSignatureType {
  case requestHeaders
  case requestQueryParams
  case requestChunk
  case requestTrailingHeaders
  case requestEvent
  public static func == (a: SmithyHTTPAuthAPI.AWSSignatureType, b: SmithyHTTPAuthAPI.AWSSignatureType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AWSSignedBodyHeader {
  case none
  case contentSha256
  public static func == (a: SmithyHTTPAuthAPI.AWSSignedBodyHeader, b: SmithyHTTPAuthAPI.AWSSignedBodyHeader) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AWSSignedBodyValue {
  case empty
  case emptySha256
  case unsignedPayload
  case streamingSha256Payload
  case streamingSha256Events
  case streamingSha256PayloadTrailer
  case streamingUnsignedPayloadTrailer
  public static func == (a: SmithyHTTPAuthAPI.AWSSignedBodyValue, b: SmithyHTTPAuthAPI.AWSSignedBodyValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SigningAlgorithm : Swift.String {
  case sigv4
  case sigv4a
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SigningFlags {
  public let useDoubleURIEncode: Swift.Bool
  public let shouldNormalizeURIPath: Swift.Bool
  public let omitSessionToken: Swift.Bool
  public init(useDoubleURIEncode: Swift.Bool, shouldNormalizeURIPath: Swift.Bool, omitSessionToken: Swift.Bool)
}
extension SmithyHTTPAuthAPI.AWSSignatureType : Swift.Equatable {}
extension SmithyHTTPAuthAPI.AWSSignatureType : Swift.Hashable {}
extension SmithyHTTPAuthAPI.AWSSignedBodyHeader : Swift.Equatable {}
extension SmithyHTTPAuthAPI.AWSSignedBodyHeader : Swift.Hashable {}
extension SmithyHTTPAuthAPI.AWSSignedBodyValue : Swift.Equatable {}
extension SmithyHTTPAuthAPI.AWSSignedBodyValue : Swift.Hashable {}
extension SmithyHTTPAuthAPI.SigningAlgorithm : Swift.Equatable {}
extension SmithyHTTPAuthAPI.SigningAlgorithm : Swift.Hashable {}
extension SmithyHTTPAuthAPI.SigningAlgorithm : Swift.RawRepresentable {}
