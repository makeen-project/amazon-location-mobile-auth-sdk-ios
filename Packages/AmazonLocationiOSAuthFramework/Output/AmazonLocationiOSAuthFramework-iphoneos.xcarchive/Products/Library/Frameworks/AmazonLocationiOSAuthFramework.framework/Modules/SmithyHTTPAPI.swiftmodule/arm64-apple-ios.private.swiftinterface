// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name smithy_swift -module-name SmithyHTTPAPI
import Foundation
import Foundation/*.CharacterSet*/
import Foundation/*.DispatchQueue*/
import Foundation/*.TimeInterval*/
import Foundation/*.URL*/
import Foundation/*.URLComponents*/
import Foundation/*.URLQueryItem*/
import Foundation/*.URLRequest*/
import Smithy
import Smithy/*.AttributeKey*/
import Smithy/*.Attributes*/
import Smithy/*.ByteStream*/
import Smithy/*.ClientError*/
import Smithy/*.Context*/
import Smithy/*.ContextBuilder*/
import Smithy/*.RequestMessage*/
import Smithy/*.RequestMessageBuilder*/
import Smithy/*.ResponseMessage*/
import Smithy/*.Stream*/
import Smithy/*.URI*/
import Smithy/*.URIBuilder*/
import Smithy/*.URIQueryItem*/
import Smithy/*.URIScheme*/
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ALPNProtocol : Swift.String {
  case http1
  case http2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Smithy.Context {
  public var httpResponse: SmithyHTTPAPI.HttpResponse? {
    get
    set
  }
  public var expiration: Foundation.TimeInterval {
    get
    set
  }
  public var host: Swift.String? {
    get
    set
  }
  public var hostPrefix: Swift.String? {
    get
    set
  }
  public var method: SmithyHTTPAPI.HttpMethodType {
    get
    set
  }
  public func getOperation() -> Swift.String?
  public var partitionID: Swift.String? {
    get
    set
  }
  public var path: Swift.String {
    get
    set
  }
  public func getRegion() -> Swift.String?
  public func getServiceName() -> Swift.String
  public var signingName: Swift.String? {
    get
    set
  }
  public var signingRegion: Swift.String? {
    get
    set
  }
  public func hasUnsignedPayloadTrait() -> Swift.Bool
  public var isBidirectionalStreamingEnabled: Swift.Bool {
    get
    set
  }
  public func shouldForceH2() -> Swift.Bool
}
extension Smithy.ContextBuilder {
  @discardableResult
  public func with<T>(key: Smithy.AttributeKey<T>, value: T) -> Self
  @discardableResult
  public func withExpiration(value: Foundation.TimeInterval) -> Self
  @discardableResult
  public func withHost(value: Swift.String) -> Self
  @discardableResult
  public func withHostPrefix(value: Swift.String) -> Self
  @discardableResult
  public func withMethod(value: SmithyHTTPAPI.HttpMethodType) -> Self
  @discardableResult
  public func withOperation(value: Swift.String) -> Self
  @discardableResult
  public func withPartitionID(value: Swift.String?) -> Self
  @discardableResult
  public func withPath(value: Swift.String) -> Self
  @discardableResult
  public func withRegion(value: Swift.String?) -> Self
  @discardableResult
  public func withServiceName(value: Swift.String) -> Self
  @discardableResult
  public func withSigningName(value: Swift.String) -> Self
  @discardableResult
  public func withSigningRegion(value: Swift.String?) -> Self
  @discardableResult
  public func withUnsignedPayloadTrait(value: Swift.Bool) -> Self
  @discardableResult
  public func withBidirectionalStreamingEnabled(value: Swift.Bool) -> Self
}
public enum SmithyHTTPAPIKeys {
  public static let operation: Smithy.AttributeKey<Swift.String>
  public static let region: Smithy.AttributeKey<Swift.String>
  public static let serviceName: Smithy.AttributeKey<Swift.String>
  public static let hasUnsignedPayloadTrait: Smithy.AttributeKey<Swift.Bool>
  public static let forceUnsignedBody: Smithy.AttributeKey<Swift.Bool>
}
public struct Endpoint : Swift.Hashable {
  public let uri: Smithy.URI
  public let headers: SmithyHTTPAPI.Headers
  public var protocolType: Smithy.URIScheme? {
    get
  }
  public var queryItems: [Smithy.URIQueryItem] {
    get
  }
  public var path: Swift.String {
    get
  }
  public var host: Swift.String {
    get
  }
  public var port: Swift.Int16? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public init(urlString: Swift.String, headers: SmithyHTTPAPI.Headers = Headers(), properties: [Swift.String : Swift.AnyHashable] = [:]) throws
  public init(url: Foundation.URL, headers: SmithyHTTPAPI.Headers = Headers(), properties: [Swift.String : Swift.AnyHashable] = [:]) throws
  public init(host: Swift.String, path: Swift.String = "/", port: Swift.Int16 = 443, queryItems: [Smithy.URIQueryItem]? = nil, headers: SmithyHTTPAPI.Headers = Headers(), protocolType: Smithy.URIScheme? = .https)
  public init(uri: Smithy.URI, headers: SmithyHTTPAPI.Headers = Headers(), properties: [Swift.String : Swift.AnyHashable] = [:])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SmithyHTTPAPI.Endpoint, b: SmithyHTTPAPI.Endpoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SmithyHTTPAPI.Endpoint {
  public func authSchemes() -> [[Swift.String : Any]]?
}
public enum HTTPClientError : Swift.Error {
  case pathCreationFailed(Swift.String)
  case queryItemCreationFailed(Swift.String)
}
public struct Headers {
  public var headers: [SmithyHTTPAPI.Header]
  public init()
  public init(_ dictionary: [Swift.String : Swift.String])
  public init(_ dictionary: [Swift.String : [Swift.String]])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(name: Swift.String, values: [Swift.String])
  public mutating func add(_ header: SmithyHTTPAPI.Header)
  public mutating func update(_ header: SmithyHTTPAPI.Header)
  public mutating func update(name: Swift.String, value: [Swift.String])
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func addAll(headers: SmithyHTTPAPI.Headers)
  public mutating func remove(name: Swift.String)
  public func values(for name: Swift.String) -> [Swift.String]?
  public func value(for name: Swift.String) -> Swift.String?
  public func exists(name: Swift.String) -> Swift.Bool
  public var dictionary: [Swift.String : [Swift.String]] {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
}
extension SmithyHTTPAPI.Headers : Swift.Equatable {
  public static func == (lhs: SmithyHTTPAPI.Headers, rhs: SmithyHTTPAPI.Headers) -> Swift.Bool
}
extension SmithyHTTPAPI.Headers : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Header {
  public var name: Swift.String
  public var value: [Swift.String]
  public init(name: Swift.String, values: [Swift.String])
  public init(name: Swift.String, value: Swift.String)
}
extension SmithyHTTPAPI.Header : Swift.Equatable {
  public static func == (lhs: SmithyHTTPAPI.Header, rhs: SmithyHTTPAPI.Header) -> Swift.Bool
}
extension SmithyHTTPAPI.Header : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SmithyHTTPAPI.Header : Swift.Comparable {
  public static func < (lhs: SmithyHTTPAPI.Header, rhs: SmithyHTTPAPI.Header) -> Swift.Bool
}
extension SmithyHTTPAPI.Headers : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol HTTPClient {
  #if compiler(>=5.3) && $AsyncAwait
  func send(request: SmithyHTTPAPI.SdkHttpRequest) async throws -> SmithyHTTPAPI.HttpResponse
  #endif
}
public enum HttpMethodType : Swift.String {
  case connect
  case delete
  case get
  case head
  case options
  case patch
  case post
  case put
  case trace
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class HttpResponse : Smithy.ResponseMessage {
  public var headers: SmithyHTTPAPI.Headers
  public var body: Smithy.ByteStream
  public var reason: Swift.String?
  public var statusCode: SmithyHTTPAPI.HttpStatusCode {
    get
    set
  }
  public init(headers: SmithyHTTPAPI.Headers = .init(), statusCode: SmithyHTTPAPI.HttpStatusCode = .processing, body: Smithy.ByteStream = .noStream, reason: Swift.String? = nil)
  public init(headers: SmithyHTTPAPI.Headers = .init(), body: Smithy.ByteStream, statusCode: SmithyHTTPAPI.HttpStatusCode, reason: Swift.String? = nil)
  @objc deinit
}
extension SmithyHTTPAPI.HttpResponse : Swift.CustomDebugStringConvertible {
  public var debugDescriptionWithBody: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public enum HttpStatusCode : Swift.Int, Swift.Equatable {
  case `continue`
  case switchingProtocols
  case processing
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case iAmUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case temporaryRedirect
  case permanentRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case requestURITooLong
  case unsupportedMediaType
  case requestedRangeNotSatisfiable
  case expectationFailed
  case iAmATeapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case connectionClosedWithoutResponse
  case unavailableForLegalReasons
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case httpVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  case networkConnectTimeoutError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SmithyHTTPAPI.HttpStatusCode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SmithyHTTPAPI.HttpStatusCode {
  public var isRetryable: Swift.Bool {
    get
  }
}
final public class SdkHttpRequest : Smithy.RequestMessage {
  final public var body: Smithy.ByteStream
  final public let destination: Smithy.URI
  final public var headers: SmithyHTTPAPI.Headers
  final public let method: SmithyHTTPAPI.HttpMethodType
  final public var host: Swift.String {
    get
  }
  final public var path: Swift.String {
    get
  }
  final public var queryItems: [Smithy.URIQueryItem]? {
    get
  }
  final public var trailingHeaders: SmithyHTTPAPI.Headers
  final public var endpoint: SmithyHTTPAPI.Endpoint {
    get
  }
  convenience public init(method: SmithyHTTPAPI.HttpMethodType, endpoint: SmithyHTTPAPI.Endpoint, body: Smithy.ByteStream = ByteStream.noStream)
  public init(method: SmithyHTTPAPI.HttpMethodType, uri: Smithy.URI, headers: SmithyHTTPAPI.Headers, body: Smithy.ByteStream = ByteStream.noStream)
  final public func toBuilder() -> SmithyHTTPAPI.SdkHttpRequestBuilder
  final public func withHeader(name: Swift.String, value: Swift.String)
  final public func withoutHeader(name: Swift.String)
  final public func withBody(_ body: Smithy.ByteStream)
  public typealias RequestBuilderType = SmithyHTTPAPI.SdkHttpRequestBuilder
  @objc deinit
}
extension SmithyHTTPAPI.SdkHttpRequest {
  #if compiler(>=5.3) && $AsyncAwait
  public static func makeURLRequest(from sdkRequest: SmithyHTTPAPI.SdkHttpRequest) async throws -> Foundation.URLRequest
  #endif
}
extension SmithyHTTPAPI.SdkHttpRequest : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  final public var debugDescriptionWithBody: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
  final public var description: Swift.String {
    get
  }
}
public class SdkHttpRequestBuilder : Smithy.RequestMessageBuilder {
  required public init()
  public var headers: SmithyHTTPAPI.Headers
  public var methodType: SmithyHTTPAPI.HttpMethodType {
    get
  }
  public var host: Swift.String {
    get
  }
  public var path: Swift.String {
    get
  }
  public var body: Smithy.ByteStream {
    get
  }
  public var queryItems: [Smithy.URIQueryItem] {
    get
  }
  public var port: Swift.Int16? {
    get
  }
  public var protocolType: Smithy.URIScheme {
    get
  }
  public var trailingHeaders: SmithyHTTPAPI.Headers {
    get
  }
  public var currentQueryItems: [Smithy.URIQueryItem]? {
    get
  }
  @discardableResult
  public func withHeaders(_ value: SmithyHTTPAPI.Headers) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withHeader(name: Swift.String, value: Swift.String) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func updateHeader(name: Swift.String, value: Swift.String) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func updateHeader(name: Swift.String, value: [Swift.String]) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withTrailers(_ value: SmithyHTTPAPI.Headers) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func updateTrailer(name: Swift.String, value: [Swift.String]) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withMethod(_ value: SmithyHTTPAPI.HttpMethodType) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withHost(_ value: Swift.String) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withPath(_ value: Swift.String) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withBody(_ value: Smithy.ByteStream) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withQueryItems(_ value: [Smithy.URIQueryItem]) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withQueryItem(_ value: Smithy.URIQueryItem) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func replacingQueryItems(_ value: [Smithy.URIQueryItem]) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withPort(_ value: Swift.Int16?) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  @discardableResult
  public func withProtocol(_ value: Smithy.URIScheme) -> SmithyHTTPAPI.SdkHttpRequestBuilder
  public func build() -> SmithyHTTPAPI.SdkHttpRequest
  public typealias RequestType = SmithyHTTPAPI.SdkHttpRequest
  @objc deinit
}
extension SmithyHTTPAPI.SdkHttpRequestBuilder {
  public var signature: Swift.String? {
    get
  }
}
public func getQueryItems(url: Foundation.URL) -> [Smithy.URIQueryItem]?
extension SmithyHTTPAPI.ALPNProtocol : Swift.Equatable {}
extension SmithyHTTPAPI.ALPNProtocol : Swift.Hashable {}
extension SmithyHTTPAPI.ALPNProtocol : Swift.RawRepresentable {}
extension SmithyHTTPAPI.HttpMethodType : Swift.Equatable {}
extension SmithyHTTPAPI.HttpMethodType : Swift.Hashable {}
extension SmithyHTTPAPI.HttpMethodType : Swift.RawRepresentable {}
extension SmithyHTTPAPI.HttpStatusCode : Swift.Hashable {}
extension SmithyHTTPAPI.HttpStatusCode : Swift.RawRepresentable {}
