// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AmazonLocationiOSAuthSDK
import AWSCognitoIdentity
@_exported import AWSLocation
import AwsCommonRuntimeKit
import Combine
import CryptoKit
import Foundation
import KeychainSwift
@_exported import SmithyIdentity
@_exported import SmithyIdentityAPI
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class AuthHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func authenticateWithCognitoIdentityPool(identityPoolId: Swift.String) async throws -> AmazonLocationiOSAuthSDK.LocationCredentialsProvider?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func authenticateWithCognitoIdentityPool(identityPoolId: Swift.String, region: Swift.String) async throws -> AmazonLocationiOSAuthSDK.LocationCredentialsProvider?
  #endif
  @objc public func authenticateWithApiKey(apiKey: Swift.String, region: Swift.String) -> AmazonLocationiOSAuthSDK.LocationCredentialsProvider
  #if compiler(>=5.3) && $AsyncAwait
  public func authenticateWithCredentialsProvider(credentialsProvider: AwsCommonRuntimeKit.CredentialsProvider, region: Swift.String) async throws -> AmazonLocationiOSAuthSDK.LocationCredentialsProvider?
  #endif
  @objc public func getLocationClient() -> AmazonLocationiOSAuthSDK.AmazonLocationClient?
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case GET
  case POST
  case PUT
  case DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HTTPHeaders {
  public init()
}
@objc public class AmazonLocationClient : ObjectiveC.NSObject {
  final public let locationProvider: AmazonLocationiOSAuthSDK.LocationCredentialsProvider
  public var locationClient: AWSLocation.LocationClient?
  @objc public init(locationCredentialsProvider: AmazonLocationiOSAuthSDK.LocationCredentialsProvider)
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func initialiseLocationClient() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendAPIRequest<T, E>(serviceName: AmazonLocationiOSAuthSDK.AmazonService, endpoint: any AmazonLocationiOSAuthSDK.AmazonLocationEndpoint, httpMethod: AmazonLocationiOSAuthSDK.HTTPMethod, requestBody: (any AmazonLocationiOSAuthSDK.EncodableRequest)?, successType: T.Type, errorType: E.Type) async throws -> AmazonLocationiOSAuthSDK.AmazonLocationResponse<T, E> where T : Swift.Decodable, E : AmazonLocationiOSAuthSDK.AmazonBaseErrorResponse, E : Swift.Error
  #endif
  @objc deinit
}
public enum AmazonService : Swift.String {
  case Location
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol AmazonLocationEndpoint {
  func url() -> Swift.String
  func isApiKeyEndpoint() -> Swift.Bool
}
public struct TimeAmount : Swift.Hashable {
  @available(*, deprecated, message: "This typealias doesn't serve any purpose. Please use Int64 directly.")
  public typealias Value = Swift.Int64
  public let nanoseconds: Swift.Int64
  public static func nanoseconds(_ amount: Swift.Int64) -> AmazonLocationiOSAuthSDK.TimeAmount
  public static func microseconds(_ amount: Swift.Int64) -> AmazonLocationiOSAuthSDK.TimeAmount
  public static func milliseconds(_ amount: Swift.Int64) -> AmazonLocationiOSAuthSDK.TimeAmount
  public static func seconds(_ amount: Swift.Int64) -> AmazonLocationiOSAuthSDK.TimeAmount
  public static func minutes(_ amount: Swift.Int64) -> AmazonLocationiOSAuthSDK.TimeAmount
  public static func hours(_ amount: Swift.Int64) -> AmazonLocationiOSAuthSDK.TimeAmount
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: AmazonLocationiOSAuthSDK.TimeAmount, b: AmazonLocationiOSAuthSDK.TimeAmount) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AWSSignerV4 {
  public let credentials: AmazonLocationiOSAuthSDK.AmazonStaticCredentials
  public let serviceName: Swift.String
  public let region: Swift.String
  public init(credentials: AmazonLocationiOSAuthSDK.AmazonStaticCredentials, serviceName: Swift.String, region: Swift.String)
  public init(amazonLocationCognitoCredentialsProvider: AmazonLocationiOSAuthSDK.AmazonLocationCognitoCredentialsProvider, serviceName: Swift.String)
  public enum BodyData {
    case string(Swift.String)
    case data(Foundation.Data)
    case unsignedPayload
    case s3chunked
  }
  public func processURL(url: Foundation.URL) -> Foundation.URL?
  public func signHeaders(url: Foundation.URL, method: AmazonLocationiOSAuthSDK.HTTPMethod = .GET, headers: AmazonLocationiOSAuthSDK.HTTPHeaders = HTTPHeaders(), body: AmazonLocationiOSAuthSDK.AWSSignerV4.BodyData? = nil, omitSecurityToken: Swift.Bool = false, date: Foundation.Date = Date()) -> AmazonLocationiOSAuthSDK.HTTPHeaders
  public func signURL(url: Foundation.URL, method: AmazonLocationiOSAuthSDK.HTTPMethod = .GET, headers: AmazonLocationiOSAuthSDK.HTTPHeaders = HTTPHeaders(), body: AmazonLocationiOSAuthSDK.AWSSignerV4.BodyData? = nil, expires: AmazonLocationiOSAuthSDK.TimeAmount, omitSecurityToken: Swift.Bool = false, date: Foundation.Date = Date()) -> Foundation.URL
  public struct ChunkedSigningData {
    public let signature: Swift.String
  }
  public func startSigningChunks(url: Foundation.URL, method: AmazonLocationiOSAuthSDK.HTTPMethod = .GET, headers: AmazonLocationiOSAuthSDK.HTTPHeaders = HTTPHeaders(), date: Foundation.Date = Date()) -> (headers: AmazonLocationiOSAuthSDK.HTTPHeaders, signingData: AmazonLocationiOSAuthSDK.AWSSignerV4.ChunkedSigningData)
  public func signChunk(body: AmazonLocationiOSAuthSDK.AWSSignerV4.BodyData, signingData: AmazonLocationiOSAuthSDK.AWSSignerV4.ChunkedSigningData) -> AmazonLocationiOSAuthSDK.AWSSignerV4.ChunkedSigningData
}
public struct CognitoCredentials : Swift.Codable {
  public let identityPoolId: Swift.String
  public let accessKeyId: Swift.String
  public let secretKey: Swift.String
  public let sessionToken: Swift.String?
  public let expiration: Foundation.Date?
  public init(identityPoolId: Swift.String, accessKeyId: Swift.String, secretKey: Swift.String, sessionToken: Swift.String? = nil, expiration: Foundation.Date? = nil)
  public static func encodeCognitoCredentials(credential: AmazonLocationiOSAuthSDK.CognitoCredentials) -> Swift.String?
  public static func decodeCognitoCredentials(jsonString: Swift.String) -> AmazonLocationiOSAuthSDK.CognitoCredentials?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class CognitoCredentialsProvider {
  @objc deinit
}
public enum LogLevel : Swift.Codable {
  case none, debug, error
  public static func == (a: AmazonLocationiOSAuthSDK.LogLevel, b: AmazonLocationiOSAuthSDK.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class AmazonLocationApiCredentialsProvider : ObjectiveC.NSObject {
  @objc public init(apiKey: Swift.String, region: Swift.String?)
  @objc deinit
}
@objc public class AmazonLocationCognitoCredentialsProvider : ObjectiveC.NSObject, AmazonLocationiOSAuthSDK.LocationCredentialsProtocol {
  @objc public init(identityPoolId: Swift.String, region: Swift.String?)
  public func getCognitoCredentials() -> AmazonLocationiOSAuthSDK.CognitoCredentials?
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func refreshCognitoCredentialsIfExpired() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @objc public func refreshCognitoCredentials() async throws
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AmazonLocationRegion : ObjectiveC.NSObject {
  @objc public static func toRegionString(identityPoolId: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class AmazonStaticCredentials : ObjectiveC.NSObject {
  final public let accessKeyId: Swift.String
  final public let secretKey: Swift.String
  final public let sessionToken: Swift.String?
  final public let expiration: Foundation.Date?
  public init(accessKeyId: Swift.String, secretKey: Swift.String, sessionToken: Swift.String?, expiration: Foundation.Date?)
  @objc deinit
}
public protocol EncodableRequest {
  func toData() throws -> Foundation.Data
}
public protocol AmazonBaseErrorResponse : Swift.Decodable, Swift.Encodable {
  var errorCode: Swift.String { get }
  var errorMessage: Swift.String { get }
}
public struct AmazonErrorResponse : AmazonLocationiOSAuthSDK.AmazonBaseErrorResponse, Swift.Error {
  public let error: AmazonLocationiOSAuthSDK.AmazonErrorResponse.ErrorInfo
  public var errorCode: Swift.String {
    get
  }
  public var errorMessage: Swift.String {
    get
  }
  public struct ErrorInfo : Swift.Codable {
    public let code: Swift.String
    public let message: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AmazonLocationResponse<T, E> {
  public let status: AmazonLocationiOSAuthSDK.ResponseStatus
  public let data: T?
  public let error: E?
}
public struct EmptyData : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseStatus : Swift.Codable {
  public let statusCode: Swift.Int
  public let description: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol LocationCredentialsProtocol {
}
extension AwsCommonRuntimeKit.CredentialsProvider : AmazonLocationiOSAuthSDK.LocationCredentialsProtocol {
}
@objc public class LocationCredentialsProvider : ObjectiveC.NSObject {
  @objc public init(region: Swift.String, identityPoolId: Swift.String)
  @objc public init(region: Swift.String, apiKey: Swift.String)
  public init(credentialsProvider: AwsCommonRuntimeKit.CredentialsProvider)
  @objc public func getCognitoProvider() -> AmazonLocationiOSAuthSDK.AmazonLocationCognitoCredentialsProvider?
  @objc public func getApiProvider() -> AmazonLocationiOSAuthSDK.AmazonLocationApiCredentialsProvider?
  public func getCustomCredentialsProvider() -> AwsCommonRuntimeKit.CredentialsProvider?
  @objc public func getCredentialsProvider() -> (any AmazonLocationiOSAuthSDK.LocationCredentialsProtocol)?
  @objc public func getIdentityPoolId() -> Swift.String?
  @objc public func getAPIKey() -> Swift.String?
  @objc public func getRegion() -> Swift.String?
  @objc deinit
}
extension AmazonLocationiOSAuthSDK.HTTPMethod : Swift.Equatable {}
extension AmazonLocationiOSAuthSDK.HTTPMethod : Swift.Hashable {}
extension AmazonLocationiOSAuthSDK.HTTPMethod : Swift.RawRepresentable {}
extension AmazonLocationiOSAuthSDK.AmazonService : Swift.Equatable {}
extension AmazonLocationiOSAuthSDK.AmazonService : Swift.Hashable {}
extension AmazonLocationiOSAuthSDK.AmazonService : Swift.RawRepresentable {}
extension AmazonLocationiOSAuthSDK.LogLevel : Swift.Equatable {}
extension AmazonLocationiOSAuthSDK.LogLevel : Swift.Hashable {}
